2025/02/28 02:40:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 701405355
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.43.34808 for x64
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.11.0
    MMEngine: 0.10.6

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 701405355
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/02/28 02:41:00 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
base_lr = 8e-05
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
custom_hooks = [
    dict(
        switch_epoch=19,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                scale=(
                    640,
                    640,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='PackDetInputs'),
        ],
        type='PipelineSwitchHook'),
]
data_root = 'data/ycb/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=2, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = './checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 20
metainfo = dict(
    classes=(
        'chips_can',
        'master_chef_can',
        'cracker_box',
        'sugar_box',
        'tomato_soup_can',
        'mustard_bottle',
        'tuna_fish_can',
        'pudding_box',
        'gelatin_box',
        'potted_meat_can',
        'banana',
        'strawberry',
        'apple',
        'lemon',
        'peach',
        'pear',
        'orange',
        'plum',
        'pitcher_base',
        'bleach_cleanser',
        'windex_bottle',
        'wine_glass',
        'bowl',
        'mug',
        'sponge',
        'plate',
        'fork',
        'spoon',
        'knife',
        'spatula',
        'power_drill',
        'wood_block',
        'scissors',
        'padlock',
        'key',
        'large_marker',
        'small_marker',
        'adjustable_wrench',
        'phillips_screwdriver',
        'flat_screwdriver',
        'plastic_bolt',
        'plastic_nut',
        'hammer',
        'small_clamp',
        'medium_clamp',
        'large_clamp',
        'extra_large_clamp',
        'mini_soccer_ball',
        'softball',
        'baseball',
        'tennis_ball',
        'racquetball',
        'golf_ball',
        'chain',
        'foam_brick',
        'dice',
        'a_marbles',
        'b_marbles',
        'c_marbles',
        'd_marbles',
        'e_marbles',
        'f_marbles',
        'a_cups',
        'b_cups',
        'c_cups',
        'd_cups',
        'e_cups',
        'f_cups',
        'g_cups',
        'h_cups',
        'i_cups',
        'j_cups',
        'a_colored_wood_blocks',
        'nine_hole_peg_test',
        'a_toy_airplane',
        'b_toy_airplane',
        'c_toy_airplane',
        'd_toy_airplane',
        'e_toy_airplane',
        'f_toy_airplane',
        'g_toy_airplane',
        'h_toy_airplane',
        'i_toy_airplane',
        'j_toy_airplane',
        'k_toy_airplane',
        'a_lego_duplo',
        'b_lego_duplo',
        'c_lego_duplo',
        'd_lego_duplo',
        'e_lego_duplo',
        'f_lego_duplo',
        'g_lego_duplo',
        'h_lego_duplo',
        'i_lego_duplo',
        'j_lego_duplo',
        'k_lego_duplo',
        'l_lego_duplo',
        'm_lego_duplo',
        'timer',
        'rubiks_cube',
    ))
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        channel_attention=True,
        deepen_factor=0.167,
        expand_ratio=0.5,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth',
            prefix='backbone.',
            type='Pretrained'),
        norm_cfg=dict(type='SyncBN'),
        type='CSPNeXt',
        widen_factor=0.375),
    bbox_head=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        anchor_generator=dict(
            offset=0, strides=[
                8,
                16,
                32,
            ], type='MlvlPointGenerator'),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        exp_on_reg=False,
        feat_channels=96,
        in_channels=96,
        loss_bbox=dict(loss_weight=2.0, type='GIoULoss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='QualityFocalLoss',
            use_sigmoid=True),
        norm_cfg=dict(type='SyncBN'),
        num_classes=100,
        pred_kernel_size=1,
        share_conv=True,
        stacked_convs=2,
        type='RTMDetSepBNHead',
        with_objectness=False),
    data_preprocessor=dict(
        batch_augments=None,
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        expand_ratio=0.5,
        in_channels=[
            96,
            192,
            384,
        ],
        norm_cfg=dict(type='SyncBN'),
        num_csp_blocks=1,
        out_channels=96,
        type='CSPNeXtPAFPN'),
    test_cfg=dict(
        max_per_img=300,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.65, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(topk=13, type='DynamicSoftLabelAssigner'),
        debug=False,
        pos_weight=-1),
    type='RTMDet')
optim_wrapper = dict(
    optimizer=dict(lr=8e-05, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        bias_decay_mult=0, bypass_duplicate=True, norm_decay_mult=0),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=10, start_factor=1e-05, type='LinearLR'),
    dict(
        T_max=10,
        begin=10,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=4.000000000000001e-06,
        type='CosineAnnealingLR'),
]
resume = False
stage2_num_epochs = 1
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'a_marbles',
                'b_marbles',
                'c_marbles',
                'd_marbles',
                'e_marbles',
                'f_marbles',
                'a_cups',
                'b_cups',
                'c_cups',
                'd_cups',
                'e_cups',
                'f_cups',
                'g_cups',
                'h_cups',
                'i_cups',
                'j_cups',
                'a_colored_wood_blocks',
                'nine_hole_peg_test',
                'a_toy_airplane',
                'b_toy_airplane',
                'c_toy_airplane',
                'd_toy_airplane',
                'e_toy_airplane',
                'f_toy_airplane',
                'g_toy_airplane',
                'h_toy_airplane',
                'i_toy_airplane',
                'j_toy_airplane',
                'k_toy_airplane',
                'a_lego_duplo',
                'b_lego_duplo',
                'c_lego_duplo',
                'd_lego_duplo',
                'e_lego_duplo',
                'f_lego_duplo',
                'g_lego_duplo',
                'h_lego_duplo',
                'i_lego_duplo',
                'j_lego_duplo',
                'k_lego_duplo',
                'l_lego_duplo',
                'm_lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        640,
        640,
    ), type='Resize'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_batch_size_per_gpu = 4
train_cfg = dict(
    dynamic_intervals=[
        (
            280,
            1,
        ),
    ],
    max_epochs=20,
    type='EpochBasedTrainLoop',
    val_interval=1)
train_dataloader = dict(
    batch_sampler=None,
    batch_size=4,
    dataset=dict(
        ann_file='train.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='data/ycb/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'a_marbles',
                'b_marbles',
                'c_marbles',
                'd_marbles',
                'e_marbles',
                'f_marbles',
                'a_cups',
                'b_cups',
                'c_cups',
                'd_cups',
                'e_cups',
                'f_cups',
                'g_cups',
                'h_cups',
                'i_cups',
                'j_cups',
                'a_colored_wood_blocks',
                'nine_hole_peg_test',
                'a_toy_airplane',
                'b_toy_airplane',
                'c_toy_airplane',
                'd_toy_airplane',
                'e_toy_airplane',
                'f_toy_airplane',
                'g_toy_airplane',
                'h_toy_airplane',
                'i_toy_airplane',
                'j_toy_airplane',
                'k_toy_airplane',
                'a_lego_duplo',
                'b_lego_duplo',
                'c_lego_duplo',
                'd_lego_duplo',
                'e_lego_duplo',
                'f_lego_duplo',
                'g_lego_duplo',
                'h_lego_duplo',
                'i_lego_duplo',
                'j_lego_duplo',
                'k_lego_duplo',
                'l_lego_duplo',
                'm_lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=20,
                pad_val=114.0,
                random_pop=False,
                type='CachedMosaic'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    1280,
                    1280,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=10,
                pad_val=(
                    114,
                    114,
                    114,
                ),
                prob=0.5,
                random_pop=False,
                ratio_range=(
                    1.0,
                    1.0,
                ),
                type='CachedMixUp'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 2
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=20,
        pad_val=114.0,
        random_pop=False,
        type='CachedMosaic'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            1280,
            1280,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=10,
        pad_val=(
            114,
            114,
            114,
        ),
        prob=0.5,
        random_pop=False,
        ratio_range=(
            1.0,
            1.0,
        ),
        type='CachedMixUp'),
    dict(type='PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        scale=(
            640,
            640,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.6, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    640,
                    640,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    320,
                    320,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    960,
                    960,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(
                    pad_val=dict(img=(
                        114,
                        114,
                        114,
                    )),
                    size=(
                        960,
                        960,
                    ),
                    type='Pad'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'a_marbles',
                'b_marbles',
                'c_marbles',
                'd_marbles',
                'e_marbles',
                'f_marbles',
                'a_cups',
                'b_cups',
                'c_cups',
                'd_cups',
                'e_cups',
                'f_cups',
                'g_cups',
                'h_cups',
                'i_cups',
                'j_cups',
                'a_colored_wood_blocks',
                'nine_hole_peg_test',
                'a_toy_airplane',
                'b_toy_airplane',
                'c_toy_airplane',
                'd_toy_airplane',
                'e_toy_airplane',
                'f_toy_airplane',
                'g_toy_airplane',
                'h_toy_airplane',
                'i_toy_airplane',
                'j_toy_airplane',
                'k_toy_airplane',
                'a_lego_duplo',
                'b_lego_duplo',
                'c_lego_duplo',
                'd_lego_duplo',
                'e_lego_duplo',
                'f_lego_duplo',
                'g_lego_duplo',
                'h_lego_duplo',
                'i_lego_duplo',
                'j_lego_duplo',
                'k_lego_duplo',
                'l_lego_duplo',
                'm_lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs\\rtmdet_tiny_1xb4-20e_ycb'

2025/02/28 02:41:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/02/28 02:41:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2025/02/28 02:41:04 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2025/02/28 02:41:05 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2025/02/28 02:41:05 - mmengine - INFO - Load checkpoint from ./checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2025/02/28 02:41:05 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/02/28 02:41:05 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/02/28 02:41:05 - mmengine - INFO - Checkpoints will be saved to C:\Users\kevin\Documents\OpenRobotics\detection\mmdetection\work_dirs\rtmdet_tiny_1xb4-20e_ycb.
2025/02/28 02:41:13 - mmengine - INFO - Epoch(train)  [1][  5/570]  base_lr: 3.5556e-05 lr: 3.5556e-05  eta: 5:08:56  time: 1.6268  data_time: 1.1546  memory: 1434  loss: 2.8721  loss_cls: 2.1701  loss_bbox: 0.7020
2025/02/28 02:41:15 - mmengine - INFO - Epoch(train)  [1][ 10/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 3:14:40  time: 1.0255  data_time: 0.7010  memory: 1434  loss: 2.8467  loss_cls: 2.1421  loss_bbox: 0.7046
2025/02/28 02:41:17 - mmengine - INFO - Epoch(train)  [1][ 15/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:35:41  time: 0.8205  data_time: 0.5405  memory: 1434  loss: 2.8312  loss_cls: 2.1362  loss_bbox: 0.6951
2025/02/28 02:41:20 - mmengine - INFO - Epoch(train)  [1][ 20/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:20:11  time: 0.7392  data_time: 0.4863  memory: 1434  loss: 2.8312  loss_cls: 2.1480  loss_bbox: 0.6832
2025/02/28 02:41:22 - mmengine - INFO - Epoch(train)  [1][ 25/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:09:26  time: 0.6828  data_time: 0.4395  memory: 1434  loss: 2.8586  loss_cls: 2.1979  loss_bbox: 0.6607
2025/02/28 02:41:25 - mmengine - INFO - Epoch(train)  [1][ 30/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:05:16  time: 0.6611  data_time: 0.4218  memory: 1434  loss: 2.8562  loss_cls: 2.2016  loss_bbox: 0.6547
2025/02/28 02:41:27 - mmengine - INFO - Epoch(train)  [1][ 35/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:57:35  time: 0.6208  data_time: 0.3857  memory: 1434  loss: 2.8760  loss_cls: 2.2377  loss_bbox: 0.6383
2025/02/28 02:41:30 - mmengine - INFO - Epoch(train)  [1][ 40/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:58:10  time: 0.6242  data_time: 0.3903  memory: 1434  loss: 2.8756  loss_cls: 2.2430  loss_bbox: 0.6326
2025/02/28 02:41:32 - mmengine - INFO - Epoch(train)  [1][ 45/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:54:09  time: 0.6033  data_time: 0.3674  memory: 1434  loss: 2.8872  loss_cls: 2.2650  loss_bbox: 0.6222
2025/02/28 02:41:35 - mmengine - INFO - Epoch(train)  [1][ 50/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:53:09  time: 0.5982  data_time: 0.3644  memory: 1434  loss: 2.9042  loss_cls: 2.2961  loss_bbox: 0.6081
2025/02/28 02:41:38 - mmengine - INFO - Epoch(train)  [1][ 55/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:52:41  time: 0.4929  data_time: 0.2818  memory: 1434  loss: 2.9230  loss_cls: 2.3401  loss_bbox: 0.5829
2025/02/28 02:41:41 - mmengine - INFO - Epoch(train)  [1][ 60/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:52:57  time: 0.5121  data_time: 0.2937  memory: 1434  loss: 2.9441  loss_cls: 2.3860  loss_bbox: 0.5580
2025/02/28 02:41:43 - mmengine - INFO - Epoch(train)  [1][ 65/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:50:34  time: 0.5147  data_time: 0.2951  memory: 1434  loss: 2.9604  loss_cls: 2.4261  loss_bbox: 0.5343
2025/02/28 02:41:46 - mmengine - INFO - Epoch(train)  [1][ 70/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:49:33  time: 0.5166  data_time: 0.2893  memory: 1434  loss: 2.9715  loss_cls: 2.4653  loss_bbox: 0.5062
2025/02/28 02:41:49 - mmengine - INFO - Epoch(train)  [1][ 75/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:51:19  time: 0.5433  data_time: 0.3118  memory: 1434  loss: 2.9660  loss_cls: 2.4833  loss_bbox: 0.4827
2025/02/28 02:41:52 - mmengine - INFO - Epoch(train)  [1][ 80/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:51:22  time: 0.5478  data_time: 0.3137  memory: 1434  loss: 2.9613  loss_cls: 2.5063  loss_bbox: 0.4550
2025/02/28 02:41:55 - mmengine - INFO - Epoch(train)  [1][ 85/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:50:21  time: 0.5603  data_time: 0.3263  memory: 1434  loss: 2.9301  loss_cls: 2.4932  loss_bbox: 0.4368
2025/02/28 02:41:57 - mmengine - INFO - Epoch(train)  [1][ 90/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:49:46  time: 0.5489  data_time: 0.3122  memory: 1434  loss: 2.8915  loss_cls: 2.4799  loss_bbox: 0.4115
2025/02/28 02:42:00 - mmengine - INFO - Epoch(train)  [1][ 95/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:50:09  time: 0.5678  data_time: 0.3356  memory: 1434  loss: 2.8333  loss_cls: 2.4438  loss_bbox: 0.3895
2025/02/28 02:42:03 - mmengine - INFO - Epoch(train)  [1][100/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:48:49  time: 0.5575  data_time: 0.3266  memory: 1434  loss: 2.7444  loss_cls: 2.3695  loss_bbox: 0.3748
2025/02/28 02:42:06 - mmengine - INFO - Epoch(train)  [1][105/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:49:02  time: 0.5609  data_time: 0.3341  memory: 1434  loss: 2.6256  loss_cls: 2.2619  loss_bbox: 0.3637
2025/02/28 02:42:08 - mmengine - INFO - Epoch(train)  [1][110/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:47:30  time: 0.5399  data_time: 0.3133  memory: 1434  loss: 2.4848  loss_cls: 2.1404  loss_bbox: 0.3444
2025/02/28 02:42:11 - mmengine - INFO - Epoch(train)  [1][115/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:48:18  time: 0.5637  data_time: 0.3335  memory: 1434  loss: 2.3443  loss_cls: 2.0148  loss_bbox: 0.3295
2025/02/28 02:42:14 - mmengine - INFO - Epoch(train)  [1][120/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:47:36  time: 0.5615  data_time: 0.3335  memory: 1434  loss: 2.2189  loss_cls: 1.8935  loss_bbox: 0.3254
2025/02/28 02:42:16 - mmengine - INFO - Epoch(train)  [1][125/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:47:04  time: 0.5398  data_time: 0.3150  memory: 1434  loss: 2.0744  loss_cls: 1.7553  loss_bbox: 0.3191
2025/02/28 02:42:19 - mmengine - INFO - Epoch(train)  [1][130/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:47:08  time: 0.5386  data_time: 0.3187  memory: 1434  loss: 1.9279  loss_cls: 1.6175  loss_bbox: 0.3105
2025/02/28 02:42:22 - mmengine - INFO - Epoch(train)  [1][135/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:46:39  time: 0.5389  data_time: 0.3191  memory: 1434  loss: 1.7835  loss_cls: 1.4819  loss_bbox: 0.3016
2025/02/28 02:42:24 - mmengine - INFO - Epoch(train)  [1][140/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:46:29  time: 0.5407  data_time: 0.3235  memory: 1434  loss: 1.6718  loss_cls: 1.3740  loss_bbox: 0.2978
2025/02/28 02:42:27 - mmengine - INFO - Epoch(train)  [1][145/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:46:38  time: 0.5379  data_time: 0.3195  memory: 1434  loss: 1.5731  loss_cls: 1.2787  loss_bbox: 0.2944
2025/02/28 02:42:29 - mmengine - INFO - Epoch(train)  [1][150/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:45:34  time: 0.5334  data_time: 0.3153  memory: 1434  loss: 1.4901  loss_cls: 1.2041  loss_bbox: 0.2860
2025/02/28 02:42:32 - mmengine - INFO - Epoch(train)  [1][155/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:45:35  time: 0.5300  data_time: 0.3089  memory: 1434  loss: 1.4274  loss_cls: 1.1497  loss_bbox: 0.2777
2025/02/28 02:42:34 - mmengine - INFO - Epoch(train)  [1][160/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:44:39  time: 0.5308  data_time: 0.3137  memory: 1434  loss: 1.3771  loss_cls: 1.0979  loss_bbox: 0.2792
2025/02/28 02:42:37 - mmengine - INFO - Epoch(train)  [1][165/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:44:47  time: 0.5223  data_time: 0.3103  memory: 1434  loss: 1.3372  loss_cls: 1.0560  loss_bbox: 0.2812
2025/02/28 02:42:40 - mmengine - INFO - Epoch(train)  [1][170/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:44:14  time: 0.5197  data_time: 0.3075  memory: 1434  loss: 1.2733  loss_cls: 0.9964  loss_bbox: 0.2769
2025/02/28 02:42:42 - mmengine - INFO - Epoch(train)  [1][175/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:43:54  time: 0.5195  data_time: 0.3109  memory: 1434  loss: 1.2340  loss_cls: 0.9598  loss_bbox: 0.2742
2025/02/28 02:42:45 - mmengine - INFO - Epoch(train)  [1][180/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:43:40  time: 0.5128  data_time: 0.3000  memory: 1434  loss: 1.1925  loss_cls: 0.9203  loss_bbox: 0.2722
2025/02/28 02:42:47 - mmengine - INFO - Epoch(train)  [1][185/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:43:32  time: 0.5160  data_time: 0.3041  memory: 1434  loss: 1.1826  loss_cls: 0.9078  loss_bbox: 0.2747
2025/02/28 02:42:50 - mmengine - INFO - Epoch(train)  [1][190/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:43:01  time: 0.5067  data_time: 0.2968  memory: 1434  loss: 1.1412  loss_cls: 0.8712  loss_bbox: 0.2700
2025/02/28 02:42:52 - mmengine - INFO - Epoch(train)  [1][195/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:42:46  time: 0.4976  data_time: 0.2890  memory: 1434  loss: 1.1006  loss_cls: 0.8311  loss_bbox: 0.2696
2025/02/28 02:42:55 - mmengine - INFO - Epoch(train)  [1][200/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:42:35  time: 0.5094  data_time: 0.2998  memory: 1434  loss: 1.0578  loss_cls: 0.7906  loss_bbox: 0.2672
2025/02/28 02:42:57 - mmengine - INFO - Epoch(train)  [1][205/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:42:03  time: 0.4962  data_time: 0.2917  memory: 1434  loss: 1.0165  loss_cls: 0.7533  loss_bbox: 0.2632
2025/02/28 02:43:00 - mmengine - INFO - Epoch(train)  [1][210/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:41:53  time: 0.5069  data_time: 0.3030  memory: 1434  loss: 1.0027  loss_cls: 0.7421  loss_bbox: 0.2606
2025/02/28 02:43:03 - mmengine - INFO - Epoch(train)  [1][215/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:42:18  time: 0.5131  data_time: 0.3070  memory: 1434  loss: 0.9753  loss_cls: 0.7200  loss_bbox: 0.2553
2025/02/28 02:43:05 - mmengine - INFO - Epoch(train)  [1][220/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:41:28  time: 0.5028  data_time: 0.3001  memory: 1434  loss: 0.9549  loss_cls: 0.7042  loss_bbox: 0.2507
2025/02/28 02:43:08 - mmengine - INFO - Epoch(train)  [1][225/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:41:36  time: 0.5109  data_time: 0.3045  memory: 1434  loss: 0.9277  loss_cls: 0.6809  loss_bbox: 0.2469
2025/02/28 02:43:10 - mmengine - INFO - Epoch(train)  [1][230/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:41:12  time: 0.5051  data_time: 0.3008  memory: 1434  loss: 0.9224  loss_cls: 0.6737  loss_bbox: 0.2487
2025/02/28 02:43:13 - mmengine - INFO - Epoch(train)  [1][235/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:41:15  time: 0.5076  data_time: 0.3013  memory: 1434  loss: 0.9055  loss_cls: 0.6574  loss_bbox: 0.2481
2025/02/28 02:43:15 - mmengine - INFO - Epoch(train)  [1][240/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:40:53  time: 0.5082  data_time: 0.3011  memory: 1434  loss: 0.8963  loss_cls: 0.6496  loss_bbox: 0.2467
2025/02/28 02:43:18 - mmengine - INFO - Epoch(train)  [1][245/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:40:52  time: 0.5122  data_time: 0.3054  memory: 1434  loss: 0.8772  loss_cls: 0.6333  loss_bbox: 0.2438
2025/02/28 02:43:20 - mmengine - INFO - Epoch(train)  [1][250/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:40:20  time: 0.5012  data_time: 0.2970  memory: 1434  loss: 0.8722  loss_cls: 0.6260  loss_bbox: 0.2461
2025/02/28 02:43:23 - mmengine - INFO - Epoch(train)  [1][255/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:40:13  time: 0.5091  data_time: 0.3026  memory: 1434  loss: 0.8723  loss_cls: 0.6247  loss_bbox: 0.2476
2025/02/28 02:43:25 - mmengine - INFO - Epoch(train)  [1][260/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:51  time: 0.5018  data_time: 0.2949  memory: 1434  loss: 0.8655  loss_cls: 0.6181  loss_bbox: 0.2474
2025/02/28 02:43:28 - mmengine - INFO - Epoch(train)  [1][265/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:52  time: 0.4926  data_time: 0.2852  memory: 1434  loss: 0.8672  loss_cls: 0.6198  loss_bbox: 0.2474
2025/02/28 02:43:30 - mmengine - INFO - Epoch(train)  [1][270/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:23  time: 0.4969  data_time: 0.2890  memory: 1434  loss: 0.8546  loss_cls: 0.6102  loss_bbox: 0.2443
2025/02/28 02:43:32 - mmengine - INFO - Epoch(train)  [1][275/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:15  time: 0.4894  data_time: 0.2805  memory: 1434  loss: 0.8384  loss_cls: 0.5946  loss_bbox: 0.2438
2025/02/28 02:43:34 - mmengine - INFO - Epoch(train)  [1][280/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:58  time: 0.4895  data_time: 0.2832  memory: 1434  loss: 0.8201  loss_cls: 0.5818  loss_bbox: 0.2383
2025/02/28 02:43:37 - mmengine - INFO - Epoch(train)  [1][285/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:58  time: 0.4879  data_time: 0.2795  memory: 1434  loss: 0.7932  loss_cls: 0.5624  loss_bbox: 0.2309
2025/02/28 02:43:40 - mmengine - INFO - Epoch(train)  [1][290/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:52  time: 0.4934  data_time: 0.2871  memory: 1434  loss: 0.7744  loss_cls: 0.5448  loss_bbox: 0.2296
2025/02/28 02:43:43 - mmengine - INFO - Epoch(train)  [1][295/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:55  time: 0.4950  data_time: 0.2898  memory: 1434  loss: 0.7581  loss_cls: 0.5332  loss_bbox: 0.2248
2025/02/28 02:43:46 - mmengine - INFO - Epoch(train)  [1][300/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:19  time: 0.5214  data_time: 0.3166  memory: 1434  loss: 0.7495  loss_cls: 0.5251  loss_bbox: 0.2244
2025/02/28 02:43:49 - mmengine - INFO - Epoch(train)  [1][305/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:10  time: 0.5195  data_time: 0.3142  memory: 1434  loss: 0.7201  loss_cls: 0.5015  loss_bbox: 0.2186
2025/02/28 02:43:51 - mmengine - INFO - Epoch(train)  [1][310/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:12  time: 0.5314  data_time: 0.3259  memory: 1434  loss: 0.7040  loss_cls: 0.4855  loss_bbox: 0.2185
2025/02/28 02:43:54 - mmengine - INFO - Epoch(train)  [1][315/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:05  time: 0.5267  data_time: 0.3204  memory: 1434  loss: 0.6836  loss_cls: 0.4689  loss_bbox: 0.2147
2025/02/28 02:43:56 - mmengine - INFO - Epoch(train)  [1][320/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:55  time: 0.5353  data_time: 0.3279  memory: 1434  loss: 0.6860  loss_cls: 0.4693  loss_bbox: 0.2166
2025/02/28 02:43:59 - mmengine - INFO - Epoch(train)  [1][325/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:34  time: 0.5273  data_time: 0.3223  memory: 1434  loss: 0.6904  loss_cls: 0.4719  loss_bbox: 0.2185
2025/02/28 02:44:02 - mmengine - INFO - Epoch(train)  [1][330/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:55  time: 0.5485  data_time: 0.3410  memory: 1434  loss: 0.6831  loss_cls: 0.4654  loss_bbox: 0.2177
2025/02/28 02:44:04 - mmengine - INFO - Epoch(train)  [1][335/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:23  time: 0.5294  data_time: 0.3244  memory: 1434  loss: 0.6762  loss_cls: 0.4622  loss_bbox: 0.2141
2025/02/28 02:44:06 - mmengine - INFO - Epoch(train)  [1][340/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:22  time: 0.5318  data_time: 0.3239  memory: 1434  loss: 0.6725  loss_cls: 0.4612  loss_bbox: 0.2113
2025/02/28 02:44:09 - mmengine - INFO - Epoch(train)  [1][345/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:01  time: 0.5175  data_time: 0.3070  memory: 1434  loss: 0.6764  loss_cls: 0.4635  loss_bbox: 0.2129
2025/02/28 02:44:11 - mmengine - INFO - Epoch(train)  [1][350/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:05  time: 0.5070  data_time: 0.2905  memory: 1434  loss: 0.6533  loss_cls: 0.4449  loss_bbox: 0.2084
2025/02/28 02:44:14 - mmengine - INFO - Epoch(train)  [1][355/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:59  time: 0.5081  data_time: 0.2919  memory: 1434  loss: 0.6616  loss_cls: 0.4486  loss_bbox: 0.2130
2025/02/28 02:44:17 - mmengine - INFO - Epoch(train)  [1][360/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:57  time: 0.5056  data_time: 0.2893  memory: 1434  loss: 0.6544  loss_cls: 0.4426  loss_bbox: 0.2118
2025/02/28 02:44:19 - mmengine - INFO - Epoch(train)  [1][365/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:48  time: 0.5034  data_time: 0.2897  memory: 1434  loss: 0.6410  loss_cls: 0.4318  loss_bbox: 0.2092
2025/02/28 02:44:23 - mmengine - INFO - Epoch(train)  [1][370/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:34  time: 0.5398  data_time: 0.3215  memory: 1434  loss: 0.6253  loss_cls: 0.4172  loss_bbox: 0.2080
2025/02/28 02:44:26 - mmengine - INFO - Epoch(train)  [1][375/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:17  time: 0.5403  data_time: 0.3220  memory: 1434  loss: 0.6156  loss_cls: 0.4060  loss_bbox: 0.2096
2025/02/28 02:44:29 - mmengine - INFO - Epoch(train)  [1][380/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:27  time: 0.5351  data_time: 0.3143  memory: 1434  loss: 0.6167  loss_cls: 0.4063  loss_bbox: 0.2104
2025/02/28 02:44:31 - mmengine - INFO - Epoch(train)  [1][385/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:13  time: 0.5450  data_time: 0.3220  memory: 1434  loss: 0.6124  loss_cls: 0.3995  loss_bbox: 0.2130
2025/02/28 02:44:34 - mmengine - INFO - Epoch(train)  [1][390/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:10  time: 0.5440  data_time: 0.3251  memory: 1434  loss: 0.6051  loss_cls: 0.3909  loss_bbox: 0.2141
2025/02/28 02:44:36 - mmengine - INFO - Epoch(train)  [1][395/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:50  time: 0.5431  data_time: 0.3254  memory: 1434  loss: 0.6145  loss_cls: 0.3982  loss_bbox: 0.2163
2025/02/28 02:44:39 - mmengine - INFO - Epoch(train)  [1][400/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:05  time: 0.5519  data_time: 0.3333  memory: 1434  loss: 0.6190  loss_cls: 0.4029  loss_bbox: 0.2162
2025/02/28 02:44:41 - mmengine - INFO - Epoch(train)  [1][405/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:56  time: 0.5498  data_time: 0.3308  memory: 1434  loss: 0.6181  loss_cls: 0.4050  loss_bbox: 0.2132
2025/02/28 02:44:44 - mmengine - INFO - Epoch(train)  [1][410/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:55  time: 0.5508  data_time: 0.3312  memory: 1434  loss: 0.6137  loss_cls: 0.4030  loss_bbox: 0.2107
2025/02/28 02:44:46 - mmengine - INFO - Epoch(train)  [1][415/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:36  time: 0.5425  data_time: 0.3224  memory: 1434  loss: 0.6163  loss_cls: 0.4056  loss_bbox: 0.2107
2025/02/28 02:44:49 - mmengine - INFO - Epoch(train)  [1][420/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:35  time: 0.5115  data_time: 0.2986  memory: 1434  loss: 0.6160  loss_cls: 0.4077  loss_bbox: 0.2083
2025/02/28 02:44:51 - mmengine - INFO - Epoch(train)  [1][425/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:12  time: 0.5051  data_time: 0.2949  memory: 1434  loss: 0.6128  loss_cls: 0.4058  loss_bbox: 0.2070
2025/02/28 02:44:54 - mmengine - INFO - Epoch(train)  [1][430/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:13  time: 0.4988  data_time: 0.2951  memory: 1434  loss: 0.6064  loss_cls: 0.3999  loss_bbox: 0.2066
2025/02/28 02:44:55 - mmengine - INFO - Epoch(train)  [1][435/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:46  time: 0.4876  data_time: 0.2887  memory: 1434  loss: 0.5984  loss_cls: 0.3934  loss_bbox: 0.2050
2025/02/28 02:44:58 - mmengine - INFO - Epoch(train)  [1][440/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:42  time: 0.4856  data_time: 0.2850  memory: 1434  loss: 0.5959  loss_cls: 0.3907  loss_bbox: 0.2051
2025/02/28 02:45:00 - mmengine - INFO - Epoch(train)  [1][445/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:31  time: 0.4907  data_time: 0.2908  memory: 1434  loss: 0.5859  loss_cls: 0.3802  loss_bbox: 0.2057
2025/02/28 02:45:03 - mmengine - INFO - Epoch(train)  [1][450/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:38  time: 0.4861  data_time: 0.2902  memory: 1434  loss: 0.5915  loss_cls: 0.3837  loss_bbox: 0.2078
2025/02/28 02:45:06 - mmengine - INFO - Epoch(train)  [1][455/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:33  time: 0.4875  data_time: 0.2873  memory: 1434  loss: 0.5992  loss_cls: 0.3863  loss_bbox: 0.2129
2025/02/28 02:45:09 - mmengine - INFO - Epoch(train)  [1][460/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:36  time: 0.4903  data_time: 0.2906  memory: 1434  loss: 0.6016  loss_cls: 0.3871  loss_bbox: 0.2144
2025/02/28 02:45:11 - mmengine - INFO - Epoch(train)  [1][465/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:26  time: 0.4959  data_time: 0.2949  memory: 1434  loss: 0.5928  loss_cls: 0.3790  loss_bbox: 0.2139
2025/02/28 02:45:14 - mmengine - INFO - Epoch(train)  [1][470/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:40  time: 0.5086  data_time: 0.3021  memory: 1434  loss: 0.5854  loss_cls: 0.3700  loss_bbox: 0.2154
2025/02/28 02:45:16 - mmengine - INFO - Epoch(train)  [1][475/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:15  time: 0.5057  data_time: 0.2983  memory: 1434  loss: 0.5790  loss_cls: 0.3686  loss_bbox: 0.2104
2025/02/28 02:45:19 - mmengine - INFO - Epoch(train)  [1][480/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:10  time: 0.4999  data_time: 0.2885  memory: 1434  loss: 0.5711  loss_cls: 0.3643  loss_bbox: 0.2068
2025/02/28 02:45:20 - mmengine - INFO - Epoch(train)  [1][485/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:47  time: 0.5006  data_time: 0.2885  memory: 1434  loss: 0.5690  loss_cls: 0.3627  loss_bbox: 0.2063
2025/02/28 02:45:23 - mmengine - INFO - Epoch(train)  [1][490/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:54  time: 0.5102  data_time: 0.2960  memory: 1434  loss: 0.5689  loss_cls: 0.3633  loss_bbox: 0.2057
2025/02/28 02:45:25 - mmengine - INFO - Epoch(train)  [1][495/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:31  time: 0.4988  data_time: 0.2860  memory: 1434  loss: 0.5637  loss_cls: 0.3606  loss_bbox: 0.2031
2025/02/28 02:45:28 - mmengine - INFO - Epoch(train)  [1][500/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:36  time: 0.4963  data_time: 0.2846  memory: 1434  loss: 0.5481  loss_cls: 0.3502  loss_bbox: 0.1979
2025/02/28 02:45:30 - mmengine - INFO - Epoch(train)  [1][505/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:25  time: 0.4909  data_time: 0.2859  memory: 1434  loss: 0.5276  loss_cls: 0.3357  loss_bbox: 0.1919
2025/02/28 02:45:33 - mmengine - INFO - Epoch(train)  [1][510/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:24  time: 0.4871  data_time: 0.2810  memory: 1434  loss: 0.5067  loss_cls: 0.3195  loss_bbox: 0.1872
2025/02/28 02:45:35 - mmengine - INFO - Epoch(train)  [1][515/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:07  time: 0.4800  data_time: 0.2763  memory: 1434  loss: 0.5088  loss_cls: 0.3208  loss_bbox: 0.1880
2025/02/28 02:45:38 - mmengine - INFO - Epoch(train)  [1][520/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:11  time: 0.4711  data_time: 0.2673  memory: 1434  loss: 0.5088  loss_cls: 0.3238  loss_bbox: 0.1850
2025/02/28 02:45:40 - mmengine - INFO - Epoch(train)  [1][525/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:00  time: 0.4816  data_time: 0.2774  memory: 1434  loss: 0.5097  loss_cls: 0.3237  loss_bbox: 0.1860
2025/02/28 02:45:43 - mmengine - INFO - Epoch(train)  [1][530/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:58  time: 0.4840  data_time: 0.2778  memory: 1434  loss: 0.5168  loss_cls: 0.3289  loss_bbox: 0.1879
2025/02/28 02:45:45 - mmengine - INFO - Epoch(train)  [1][535/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:51  time: 0.4974  data_time: 0.2899  memory: 1434  loss: 0.5154  loss_cls: 0.3262  loss_bbox: 0.1891
2025/02/28 02:45:47 - mmengine - INFO - Epoch(train)  [1][540/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:40  time: 0.4807  data_time: 0.2712  memory: 1434  loss: 0.5078  loss_cls: 0.3197  loss_bbox: 0.1881
2025/02/28 02:45:51 - mmengine - INFO - Epoch(train)  [1][545/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:47  time: 0.5074  data_time: 0.2911  memory: 1434  loss: 0.4929  loss_cls: 0.3049  loss_bbox: 0.1880
2025/02/28 02:45:53 - mmengine - INFO - Epoch(train)  [1][550/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:43  time: 0.4999  data_time: 0.2800  memory: 1434  loss: 0.4903  loss_cls: 0.2996  loss_bbox: 0.1907
2025/02/28 02:45:56 - mmengine - INFO - Epoch(train)  [1][555/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:42  time: 0.5090  data_time: 0.2865  memory: 1434  loss: 0.4913  loss_cls: 0.2977  loss_bbox: 0.1937
2025/02/28 02:45:58 - mmengine - INFO - Epoch(train)  [1][560/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:35  time: 0.5027  data_time: 0.2778  memory: 1434  loss: 0.4944  loss_cls: 0.2991  loss_bbox: 0.1954
2025/02/28 02:46:01 - mmengine - INFO - Epoch(train)  [1][565/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:45  time: 0.5284  data_time: 0.3000  memory: 1434  loss: 0.4879  loss_cls: 0.2931  loss_bbox: 0.1948
2025/02/28 02:46:04 - mmengine - INFO - Exp name: rtmdet_tiny_1xb4-20e_ycb_20250228_024056
2025/02/28 02:46:04 - mmengine - INFO - Epoch(train)  [1][570/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:35  time: 0.5150  data_time: 0.2877  memory: 1434  loss: 0.4948  loss_cls: 0.2970  loss_bbox: 0.1977
2025/02/28 02:46:32 - mmengine - INFO - Epoch(val)  [1][ 5/24]    eta: 0:01:48  time: 5.7082  data_time: 5.1575  memory: 336  
2025/02/28 02:46:34 - mmengine - INFO - Epoch(val)  [1][10/24]    eta: 0:00:42  time: 3.0708  data_time: 2.5800  memory: 336  
2025/02/28 02:46:37 - mmengine - INFO - Epoch(val)  [1][15/24]    eta: 0:00:19  time: 2.1976  data_time: 1.7204  memory: 336  
2025/02/28 02:46:39 - mmengine - INFO - Epoch(val)  [1][20/24]    eta: 0:00:07  time: 1.7609  data_time: 1.2907  memory: 336  
