2025/02/28 02:13:06 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1758850844
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.43.34808 for x64
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.11.0
    MMEngine: 0.10.6

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1758850844
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/02/28 02:13:06 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
base_lr = 8e-05
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
custom_hooks = [
    dict(
        switch_epoch=19,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                scale=(
                    640,
                    640,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='PackDetInputs'),
        ],
        type='PipelineSwitchHook'),
]
data_root = 'data/ycb/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=2, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = './checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 20
metainfo = dict(
    classes=(
        'chips_can',
        'master_chef_can',
        'cracker_box',
        'sugar_box',
        'tomato_soup_can',
        'mustard_bottle',
        'tuna_fish_can',
        'pudding_box',
        'gelatin_box',
        'potted_meat_can',
        'banana',
        'strawberry',
        'apple',
        'lemon',
        'peach',
        'pear',
        'orange',
        'plum',
        'pitcher_base',
        'bleach_cleanser',
        'windex_bottle',
        'wine_glass',
        'bowl',
        'mug',
        'sponge',
        'skillet',
        'skillet_lid',
        'plate',
        'fork',
        'spoon',
        'knife',
        'spatula',
        'power_drill',
        'wood_block',
        'scissors',
        'padlock',
        'key',
        'large_marker',
        'small_marker',
        'adjustable_wrench',
        'phillips_screwdriver',
        'flat_screwdriver',
        'plastic_bolt',
        'plastic_nut',
        'hammer',
        'small_clamp',
        'medium_clamp',
        'large_clamp',
        'extra_large_clamp',
        'mini_soccer_ball',
        'softball',
        'baseball',
        'tennis_ball',
        'racquetball',
        'golf_ball',
        'chain',
        'foam_brick',
        'dice',
        'marbles_a',
        'marbles_b',
        'marbles_c',
        'marbles_d',
        'marbles_e',
        'marbles_f',
        'cups_a',
        'cups_b',
        'cups_c',
        'cups_d',
        'cups_e',
        'cups_f',
        'cups_g',
        'cups_h',
        'cups_i',
        'cups_j',
        'colored_wood_blocks_a',
        'colored_wood_blocks_b',
        'nine_hole_peg_test',
        'toy_airplane_a',
        'toy_airplane_b',
        'toy_airplane_c',
        'toy_airplane_d',
        'toy_airplane_e',
        'toy_airplane_f',
        'toy_airplane_g',
        'toy_airplane_h',
        'toy_airplane_i',
        'toy_airplane_j',
        'toy_airplane_k',
        'lego_duplo_a',
        'lego_duplo_b',
        'lego_duplo_c',
        'lego_duplo_d',
        'lego_duplo_e',
        'lego_duplo_f',
        'lego_duplo_g',
        'lego_duplo_h',
        'lego_duplo_i',
        'lego_duplo_j',
        'lego_duplo_k',
        'lego_duplo_l',
        'lego_duplo_m',
        'timer',
        'rubiks_cube',
    ))
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        channel_attention=True,
        deepen_factor=0.167,
        expand_ratio=0.5,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth',
            prefix='backbone.',
            type='Pretrained'),
        norm_cfg=dict(type='SyncBN'),
        type='CSPNeXt',
        widen_factor=0.375),
    bbox_head=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        anchor_generator=dict(
            offset=0, strides=[
                8,
                16,
                32,
            ], type='MlvlPointGenerator'),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        exp_on_reg=False,
        feat_channels=96,
        in_channels=96,
        loss_bbox=dict(loss_weight=2.0, type='GIoULoss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='QualityFocalLoss',
            use_sigmoid=True),
        norm_cfg=dict(type='SyncBN'),
        num_classes=100,
        pred_kernel_size=1,
        share_conv=True,
        stacked_convs=2,
        type='RTMDetSepBNHead',
        with_objectness=False),
    data_preprocessor=dict(
        batch_augments=None,
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        expand_ratio=0.5,
        in_channels=[
            96,
            192,
            384,
        ],
        norm_cfg=dict(type='SyncBN'),
        num_csp_blocks=1,
        out_channels=96,
        type='CSPNeXtPAFPN'),
    test_cfg=dict(
        max_per_img=300,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.65, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(topk=13, type='DynamicSoftLabelAssigner'),
        debug=False,
        pos_weight=-1),
    type='RTMDet')
optim_wrapper = dict(
    optimizer=dict(lr=8e-05, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        bias_decay_mult=0, bypass_duplicate=True, norm_decay_mult=0),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=10, start_factor=1e-05, type='LinearLR'),
    dict(
        T_max=10,
        begin=10,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=4.000000000000001e-06,
        type='CosineAnnealingLR'),
]
resume = False
stage2_num_epochs = 1
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'skillet',
                'skillet_lid',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'marbles_a',
                'marbles_b',
                'marbles_c',
                'marbles_d',
                'marbles_e',
                'marbles_f',
                'cups_a',
                'cups_b',
                'cups_c',
                'cups_d',
                'cups_e',
                'cups_f',
                'cups_g',
                'cups_h',
                'cups_i',
                'cups_j',
                'colored_wood_blocks_a',
                'colored_wood_blocks_b',
                'nine_hole_peg_test',
                'toy_airplane_a',
                'toy_airplane_b',
                'toy_airplane_c',
                'toy_airplane_d',
                'toy_airplane_e',
                'toy_airplane_f',
                'toy_airplane_g',
                'toy_airplane_h',
                'toy_airplane_i',
                'toy_airplane_j',
                'toy_airplane_k',
                'lego_duplo_a',
                'lego_duplo_b',
                'lego_duplo_c',
                'lego_duplo_d',
                'lego_duplo_e',
                'lego_duplo_f',
                'lego_duplo_g',
                'lego_duplo_h',
                'lego_duplo_i',
                'lego_duplo_j',
                'lego_duplo_k',
                'lego_duplo_l',
                'lego_duplo_m',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        640,
        640,
    ), type='Resize'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_batch_size_per_gpu = 4
train_cfg = dict(
    dynamic_intervals=[
        (
            280,
            1,
        ),
    ],
    max_epochs=20,
    type='EpochBasedTrainLoop',
    val_interval=1)
train_dataloader = dict(
    batch_sampler=None,
    batch_size=4,
    dataset=dict(
        ann_file='train.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='data/ycb/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'skillet',
                'skillet_lid',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'marbles_a',
                'marbles_b',
                'marbles_c',
                'marbles_d',
                'marbles_e',
                'marbles_f',
                'cups_a',
                'cups_b',
                'cups_c',
                'cups_d',
                'cups_e',
                'cups_f',
                'cups_g',
                'cups_h',
                'cups_i',
                'cups_j',
                'colored_wood_blocks_a',
                'colored_wood_blocks_b',
                'nine_hole_peg_test',
                'toy_airplane_a',
                'toy_airplane_b',
                'toy_airplane_c',
                'toy_airplane_d',
                'toy_airplane_e',
                'toy_airplane_f',
                'toy_airplane_g',
                'toy_airplane_h',
                'toy_airplane_i',
                'toy_airplane_j',
                'toy_airplane_k',
                'lego_duplo_a',
                'lego_duplo_b',
                'lego_duplo_c',
                'lego_duplo_d',
                'lego_duplo_e',
                'lego_duplo_f',
                'lego_duplo_g',
                'lego_duplo_h',
                'lego_duplo_i',
                'lego_duplo_j',
                'lego_duplo_k',
                'lego_duplo_l',
                'lego_duplo_m',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=20,
                pad_val=114.0,
                random_pop=False,
                type='CachedMosaic'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    1280,
                    1280,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=10,
                pad_val=(
                    114,
                    114,
                    114,
                ),
                prob=0.5,
                random_pop=False,
                ratio_range=(
                    1.0,
                    1.0,
                ),
                type='CachedMixUp'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 2
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=20,
        pad_val=114.0,
        random_pop=False,
        type='CachedMosaic'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            1280,
            1280,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=10,
        pad_val=(
            114,
            114,
            114,
        ),
        prob=0.5,
        random_pop=False,
        ratio_range=(
            1.0,
            1.0,
        ),
        type='CachedMixUp'),
    dict(type='PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        scale=(
            640,
            640,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.6, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    640,
                    640,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    320,
                    320,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    960,
                    960,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(
                    pad_val=dict(img=(
                        114,
                        114,
                        114,
                    )),
                    size=(
                        960,
                        960,
                    ),
                    type='Pad'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'skillet',
                'skillet_lid',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'marbles_a',
                'marbles_b',
                'marbles_c',
                'marbles_d',
                'marbles_e',
                'marbles_f',
                'cups_a',
                'cups_b',
                'cups_c',
                'cups_d',
                'cups_e',
                'cups_f',
                'cups_g',
                'cups_h',
                'cups_i',
                'cups_j',
                'colored_wood_blocks_a',
                'colored_wood_blocks_b',
                'nine_hole_peg_test',
                'toy_airplane_a',
                'toy_airplane_b',
                'toy_airplane_c',
                'toy_airplane_d',
                'toy_airplane_e',
                'toy_airplane_f',
                'toy_airplane_g',
                'toy_airplane_h',
                'toy_airplane_i',
                'toy_airplane_j',
                'toy_airplane_k',
                'lego_duplo_a',
                'lego_duplo_b',
                'lego_duplo_c',
                'lego_duplo_d',
                'lego_duplo_e',
                'lego_duplo_f',
                'lego_duplo_g',
                'lego_duplo_h',
                'lego_duplo_i',
                'lego_duplo_j',
                'lego_duplo_k',
                'lego_duplo_l',
                'lego_duplo_m',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs\\rtmdet_tiny_1xb4-20e_ycb'

2025/02/28 02:13:09 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/02/28 02:13:09 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2025/02/28 02:13:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2025/02/28 02:13:11 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2025/02/28 02:13:11 - mmengine - INFO - Load checkpoint from ./checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2025/02/28 02:13:11 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/02/28 02:13:11 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/02/28 02:13:11 - mmengine - INFO - Checkpoints will be saved to C:\Users\kevin\Documents\OpenRobotics\detection\mmdetection\work_dirs\rtmdet_tiny_1xb4-20e_ycb.
2025/02/28 02:13:19 - mmengine - INFO - Epoch(train)  [1][  5/570]  base_lr: 3.5556e-05 lr: 3.5556e-05  eta: 5:07:08  time: 1.6173  data_time: 1.2754  memory: 1434  loss: 2.9082  loss_cls: 2.2300  loss_bbox: 0.6782
2025/02/28 02:13:21 - mmengine - INFO - Epoch(train)  [1][ 10/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 3:12:08  time: 1.0121  data_time: 0.7592  memory: 1434  loss: 2.8512  loss_cls: 2.1695  loss_bbox: 0.6817
2025/02/28 02:13:24 - mmengine - INFO - Epoch(train)  [1][ 15/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:39:10  time: 0.8388  data_time: 0.6123  memory: 1434  loss: 2.8432  loss_cls: 2.1712  loss_bbox: 0.6720
2025/02/28 02:13:26 - mmengine - INFO - Epoch(train)  [1][ 20/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:19:23  time: 0.7349  data_time: 0.5218  memory: 1434  loss: 2.8771  loss_cls: 2.2277  loss_bbox: 0.6495
2025/02/28 02:13:28 - mmengine - INFO - Epoch(train)  [1][ 25/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:10:39  time: 0.6892  data_time: 0.4726  memory: 1434  loss: 2.8922  loss_cls: 2.2612  loss_bbox: 0.6310
2025/02/28 02:13:30 - mmengine - INFO - Epoch(train)  [1][ 30/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:01:26  time: 0.6409  data_time: 0.4259  memory: 1434  loss: 2.9011  loss_cls: 2.2798  loss_bbox: 0.6213
2025/02/28 02:13:32 - mmengine - INFO - Epoch(train)  [1][ 35/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:55:47  time: 0.6113  data_time: 0.4037  memory: 1434  loss: 2.9306  loss_cls: 2.3336  loss_bbox: 0.5969
2025/02/28 02:13:34 - mmengine - INFO - Epoch(train)  [1][ 40/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:51:00  time: 0.5863  data_time: 0.3828  memory: 1434  loss: 2.9450  loss_cls: 2.3668  loss_bbox: 0.5782
2025/02/28 02:13:37 - mmengine - INFO - Epoch(train)  [1][ 45/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:47:44  time: 0.5693  data_time: 0.3699  memory: 1434  loss: 2.9482  loss_cls: 2.3832  loss_bbox: 0.5650
2025/02/28 02:13:39 - mmengine - INFO - Epoch(train)  [1][ 50/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:45:05  time: 0.5556  data_time: 0.3583  memory: 1434  loss: 2.9573  loss_cls: 2.4104  loss_bbox: 0.5469
2025/02/28 02:13:41 - mmengine - INFO - Epoch(train)  [1][ 55/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:42:30  time: 0.4346  data_time: 0.2527  memory: 1434  loss: 2.9634  loss_cls: 2.4461  loss_bbox: 0.5173
2025/02/28 02:13:43 - mmengine - INFO - Epoch(train)  [1][ 60/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:53  time: 0.4318  data_time: 0.2475  memory: 1434  loss: 2.9739  loss_cls: 2.4894  loss_bbox: 0.4846
2025/02/28 02:13:45 - mmengine - INFO - Epoch(train)  [1][ 65/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:41  time: 0.4343  data_time: 0.2493  memory: 1434  loss: 2.9644  loss_cls: 2.5086  loss_bbox: 0.4558
2025/02/28 02:13:47 - mmengine - INFO - Epoch(train)  [1][ 70/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:56  time: 0.4247  data_time: 0.2363  memory: 1434  loss: 2.9331  loss_cls: 2.4982  loss_bbox: 0.4348
2025/02/28 02:13:49 - mmengine - INFO - Epoch(train)  [1][ 75/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:33  time: 0.4148  data_time: 0.2322  memory: 1434  loss: 2.8897  loss_cls: 2.4755  loss_bbox: 0.4142
2025/02/28 02:13:51 - mmengine - INFO - Epoch(train)  [1][ 80/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:16  time: 0.4150  data_time: 0.2353  memory: 1434  loss: 2.8300  loss_cls: 2.4328  loss_bbox: 0.3972
2025/02/28 02:13:54 - mmengine - INFO - Epoch(train)  [1][ 85/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:06  time: 0.4295  data_time: 0.2482  memory: 1434  loss: 2.7058  loss_cls: 2.3246  loss_bbox: 0.3812
2025/02/28 02:13:56 - mmengine - INFO - Epoch(train)  [1][ 90/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:33:57  time: 0.4282  data_time: 0.2466  memory: 1434  loss: 2.5680  loss_cls: 2.2023  loss_bbox: 0.3657
2025/02/28 02:13:58 - mmengine - INFO - Epoch(train)  [1][ 95/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:32:59  time: 0.4253  data_time: 0.2406  memory: 1434  loss: 2.4245  loss_cls: 2.0779  loss_bbox: 0.3465
2025/02/28 02:14:00 - mmengine - INFO - Epoch(train)  [1][100/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:53  time: 0.4203  data_time: 0.2346  memory: 1434  loss: 2.2616  loss_cls: 1.9234  loss_bbox: 0.3382
2025/02/28 02:14:02 - mmengine - INFO - Epoch(train)  [1][105/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:15  time: 0.4216  data_time: 0.2367  memory: 1434  loss: 2.1168  loss_cls: 1.7890  loss_bbox: 0.3278
2025/02/28 02:14:04 - mmengine - INFO - Epoch(train)  [1][110/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:08  time: 0.4313  data_time: 0.2473  memory: 1434  loss: 1.9715  loss_cls: 1.6550  loss_bbox: 0.3165
2025/02/28 02:14:07 - mmengine - INFO - Epoch(train)  [1][115/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:21  time: 0.4312  data_time: 0.2436  memory: 1434  loss: 1.8425  loss_cls: 1.5342  loss_bbox: 0.3083
2025/02/28 02:14:09 - mmengine - INFO - Epoch(train)  [1][120/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:08  time: 0.4448  data_time: 0.2600  memory: 1434  loss: 1.7044  loss_cls: 1.4065  loss_bbox: 0.2979
2025/02/28 02:14:11 - mmengine - INFO - Epoch(train)  [1][125/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:35  time: 0.4457  data_time: 0.2597  memory: 1434  loss: 1.5636  loss_cls: 1.2767  loss_bbox: 0.2869
2025/02/28 02:14:13 - mmengine - INFO - Epoch(train)  [1][130/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:53  time: 0.4448  data_time: 0.2582  memory: 1434  loss: 1.4398  loss_cls: 1.1676  loss_bbox: 0.2722
2025/02/28 02:14:16 - mmengine - INFO - Epoch(train)  [1][135/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:48  time: 0.4343  data_time: 0.2470  memory: 1434  loss: 1.3660  loss_cls: 1.0973  loss_bbox: 0.2687
2025/02/28 02:14:18 - mmengine - INFO - Epoch(train)  [1][140/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:11  time: 0.4485  data_time: 0.2590  memory: 1434  loss: 1.3057  loss_cls: 1.0425  loss_bbox: 0.2632
2025/02/28 02:14:21 - mmengine - INFO - Epoch(train)  [1][145/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:02  time: 0.4543  data_time: 0.2644  memory: 1434  loss: 1.2604  loss_cls: 0.9977  loss_bbox: 0.2627
2025/02/28 02:14:23 - mmengine - INFO - Epoch(train)  [1][150/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:03  time: 0.4650  data_time: 0.2754  memory: 1434  loss: 1.2274  loss_cls: 0.9688  loss_bbox: 0.2587
2025/02/28 02:14:25 - mmengine - INFO - Epoch(train)  [1][155/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:43  time: 0.4662  data_time: 0.2762  memory: 1434  loss: 1.1835  loss_cls: 0.9224  loss_bbox: 0.2611
2025/02/28 02:14:28 - mmengine - INFO - Epoch(train)  [1][160/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:44  time: 0.4675  data_time: 0.2784  memory: 1434  loss: 1.1532  loss_cls: 0.8880  loss_bbox: 0.2652
2025/02/28 02:14:30 - mmengine - INFO - Epoch(train)  [1][165/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:26  time: 0.4590  data_time: 0.2750  memory: 1434  loss: 1.1070  loss_cls: 0.8464  loss_bbox: 0.2606
2025/02/28 02:14:32 - mmengine - INFO - Epoch(train)  [1][170/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:24  time: 0.4607  data_time: 0.2769  memory: 1434  loss: 1.0613  loss_cls: 0.8041  loss_bbox: 0.2572
2025/02/28 02:14:34 - mmengine - INFO - Epoch(train)  [1][175/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:49  time: 0.4566  data_time: 0.2736  memory: 1434  loss: 1.0297  loss_cls: 0.7760  loss_bbox: 0.2537
2025/02/28 02:14:36 - mmengine - INFO - Epoch(train)  [1][180/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:23  time: 0.4573  data_time: 0.2741  memory: 1434  loss: 0.9961  loss_cls: 0.7458  loss_bbox: 0.2503
2025/02/28 02:14:38 - mmengine - INFO - Epoch(train)  [1][185/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:02  time: 0.4512  data_time: 0.2663  memory: 1434  loss: 0.9596  loss_cls: 0.7120  loss_bbox: 0.2475
2025/02/28 02:14:40 - mmengine - INFO - Epoch(train)  [1][190/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:47  time: 0.4398  data_time: 0.2589  memory: 1434  loss: 0.9401  loss_cls: 0.6947  loss_bbox: 0.2454
2025/02/28 02:14:43 - mmengine - INFO - Epoch(train)  [1][195/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:50  time: 0.4424  data_time: 0.2636  memory: 1434  loss: 0.9082  loss_cls: 0.6691  loss_bbox: 0.2391
2025/02/28 02:14:45 - mmengine - INFO - Epoch(train)  [1][200/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:26  time: 0.4330  data_time: 0.2550  memory: 1434  loss: 0.8792  loss_cls: 0.6446  loss_bbox: 0.2346
2025/02/28 02:14:47 - mmengine - INFO - Epoch(train)  [1][205/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:37  time: 0.4412  data_time: 0.2650  memory: 1434  loss: 0.8638  loss_cls: 0.6364  loss_bbox: 0.2274
2025/02/28 02:14:50 - mmengine - INFO - Epoch(train)  [1][210/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:50  time: 0.4451  data_time: 0.2683  memory: 1434  loss: 0.8324  loss_cls: 0.6106  loss_bbox: 0.2218
2025/02/28 02:14:52 - mmengine - INFO - Epoch(train)  [1][215/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:00  time: 0.4538  data_time: 0.2750  memory: 1434  loss: 0.8234  loss_cls: 0.5996  loss_bbox: 0.2237
2025/02/28 02:14:55 - mmengine - INFO - Epoch(train)  [1][220/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:41  time: 0.4464  data_time: 0.2670  memory: 1434  loss: 0.8127  loss_cls: 0.5916  loss_bbox: 0.2212
2025/02/28 02:14:57 - mmengine - INFO - Epoch(train)  [1][225/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:27  time: 0.4514  data_time: 0.2713  memory: 1434  loss: 0.7951  loss_cls: 0.5773  loss_bbox: 0.2178
2025/02/28 02:14:59 - mmengine - INFO - Epoch(train)  [1][230/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:08  time: 0.4516  data_time: 0.2702  memory: 1434  loss: 0.7968  loss_cls: 0.5770  loss_bbox: 0.2198
2025/02/28 02:15:01 - mmengine - INFO - Epoch(train)  [1][235/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:17  time: 0.4618  data_time: 0.2826  memory: 1434  loss: 0.8058  loss_cls: 0.5862  loss_bbox: 0.2196
2025/02/28 02:15:03 - mmengine - INFO - Epoch(train)  [1][240/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:49  time: 0.4549  data_time: 0.2727  memory: 1434  loss: 0.7939  loss_cls: 0.5768  loss_bbox: 0.2171
2025/02/28 02:15:05 - mmengine - INFO - Epoch(train)  [1][245/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:47  time: 0.4529  data_time: 0.2702  memory: 1434  loss: 0.7773  loss_cls: 0.5613  loss_bbox: 0.2160
2025/02/28 02:15:08 - mmengine - INFO - Epoch(train)  [1][250/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:38  time: 0.4573  data_time: 0.2750  memory: 1434  loss: 0.7606  loss_cls: 0.5482  loss_bbox: 0.2124
2025/02/28 02:15:10 - mmengine - INFO - Epoch(train)  [1][255/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:30  time: 0.4500  data_time: 0.2646  memory: 1434  loss: 0.7317  loss_cls: 0.5205  loss_bbox: 0.2112
2025/02/28 02:15:12 - mmengine - INFO - Epoch(train)  [1][260/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:12  time: 0.4361  data_time: 0.2509  memory: 1434  loss: 0.7118  loss_cls: 0.5042  loss_bbox: 0.2076
2025/02/28 02:15:14 - mmengine - INFO - Epoch(train)  [1][265/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:11  time: 0.4316  data_time: 0.2467  memory: 1434  loss: 0.6914  loss_cls: 0.4870  loss_bbox: 0.2044
2025/02/28 02:15:16 - mmengine - INFO - Epoch(train)  [1][270/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:43  time: 0.4247  data_time: 0.2389  memory: 1434  loss: 0.6902  loss_cls: 0.4844  loss_bbox: 0.2058
2025/02/28 02:15:18 - mmengine - INFO - Epoch(train)  [1][275/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:33  time: 0.4249  data_time: 0.2401  memory: 1434  loss: 0.6826  loss_cls: 0.4757  loss_bbox: 0.2069
2025/02/28 02:15:20 - mmengine - INFO - Epoch(train)  [1][280/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:20  time: 0.4258  data_time: 0.2437  memory: 1434  loss: 0.6766  loss_cls: 0.4744  loss_bbox: 0.2022
2025/02/28 02:15:22 - mmengine - INFO - Epoch(train)  [1][285/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:17  time: 0.4199  data_time: 0.2376  memory: 1434  loss: 0.6529  loss_cls: 0.4524  loss_bbox: 0.2005
2025/02/28 02:15:24 - mmengine - INFO - Epoch(train)  [1][290/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:07  time: 0.4258  data_time: 0.2431  memory: 1434  loss: 0.6395  loss_cls: 0.4389  loss_bbox: 0.2006
2025/02/28 02:15:26 - mmengine - INFO - Epoch(train)  [1][295/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:58  time: 0.4216  data_time: 0.2384  memory: 1434  loss: 0.6327  loss_cls: 0.4320  loss_bbox: 0.2007
2025/02/28 02:15:29 - mmengine - INFO - Epoch(train)  [1][300/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:53  time: 0.4222  data_time: 0.2375  memory: 1434  loss: 0.6403  loss_cls: 0.4352  loss_bbox: 0.2051
2025/02/28 02:15:31 - mmengine - INFO - Epoch(train)  [1][305/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:03  time: 0.4306  data_time: 0.2491  memory: 1434  loss: 0.6400  loss_cls: 0.4339  loss_bbox: 0.2061
2025/02/28 02:15:34 - mmengine - INFO - Epoch(train)  [1][310/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:01  time: 0.4378  data_time: 0.2546  memory: 1434  loss: 0.6337  loss_cls: 0.4267  loss_bbox: 0.2071
2025/02/28 02:15:35 - mmengine - INFO - Epoch(train)  [1][315/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:39  time: 0.4249  data_time: 0.2403  memory: 1434  loss: 0.6306  loss_cls: 0.4239  loss_bbox: 0.2068
2025/02/28 02:15:38 - mmengine - INFO - Epoch(train)  [1][320/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:52  time: 0.4464  data_time: 0.2639  memory: 1434  loss: 0.6161  loss_cls: 0.4121  loss_bbox: 0.2040
2025/02/28 02:15:40 - mmengine - INFO - Epoch(train)  [1][325/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:29  time: 0.4374  data_time: 0.2537  memory: 1434  loss: 0.6279  loss_cls: 0.4202  loss_bbox: 0.2077
2025/02/28 02:15:42 - mmengine - INFO - Epoch(train)  [1][330/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:37  time: 0.4485  data_time: 0.2623  memory: 1434  loss: 0.6229  loss_cls: 0.4113  loss_bbox: 0.2116
2025/02/28 02:15:44 - mmengine - INFO - Epoch(train)  [1][335/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:29  time: 0.4450  data_time: 0.2599  memory: 1434  loss: 0.6174  loss_cls: 0.4051  loss_bbox: 0.2123
2025/02/28 02:15:47 - mmengine - INFO - Epoch(train)  [1][340/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:26  time: 0.4488  data_time: 0.2671  memory: 1434  loss: 0.6166  loss_cls: 0.4032  loss_bbox: 0.2134
2025/02/28 02:15:49 - mmengine - INFO - Epoch(train)  [1][345/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:25  time: 0.4527  data_time: 0.2734  memory: 1434  loss: 0.6151  loss_cls: 0.4009  loss_bbox: 0.2142
2025/02/28 02:15:51 - mmengine - INFO - Epoch(train)  [1][350/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:16  time: 0.4501  data_time: 0.2724  memory: 1434  loss: 0.6033  loss_cls: 0.3900  loss_bbox: 0.2133
2025/02/28 02:15:54 - mmengine - INFO - Epoch(train)  [1][355/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:28  time: 0.4520  data_time: 0.2733  memory: 1434  loss: 0.5911  loss_cls: 0.3789  loss_bbox: 0.2122
2025/02/28 02:15:56 - mmengine - INFO - Epoch(train)  [1][360/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:09  time: 0.4412  data_time: 0.2628  memory: 1434  loss: 0.5806  loss_cls: 0.3693  loss_bbox: 0.2113
2025/02/28 02:15:58 - mmengine - INFO - Epoch(train)  [1][365/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:08  time: 0.4530  data_time: 0.2781  memory: 1434  loss: 0.5705  loss_cls: 0.3600  loss_bbox: 0.2105
2025/02/28 02:16:00 - mmengine - INFO - Epoch(train)  [1][370/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:03  time: 0.4421  data_time: 0.2647  memory: 1434  loss: 0.5744  loss_cls: 0.3616  loss_bbox: 0.2128
2025/02/28 02:16:03 - mmengine - INFO - Epoch(train)  [1][375/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:19  time: 0.4665  data_time: 0.2897  memory: 1434  loss: 0.5943  loss_cls: 0.3775  loss_bbox: 0.2168
2025/02/28 02:16:05 - mmengine - INFO - Epoch(train)  [1][380/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:04  time: 0.4518  data_time: 0.2750  memory: 1434  loss: 0.5850  loss_cls: 0.3691  loss_bbox: 0.2158
2025/02/28 02:16:07 - mmengine - INFO - Epoch(train)  [1][385/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:53  time: 0.4492  data_time: 0.2738  memory: 1434  loss: 0.6003  loss_cls: 0.3816  loss_bbox: 0.2187
2025/02/28 02:16:09 - mmengine - INFO - Epoch(train)  [1][390/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:44  time: 0.4446  data_time: 0.2662  memory: 1434  loss: 0.5974  loss_cls: 0.3754  loss_bbox: 0.2219
2025/02/28 02:16:12 - mmengine - INFO - Epoch(train)  [1][395/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:00  time: 0.4570  data_time: 0.2777  memory: 1434  loss: 0.5959  loss_cls: 0.3745  loss_bbox: 0.2215
2025/02/28 02:16:14 - mmengine - INFO - Epoch(train)  [1][400/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:42  time: 0.4489  data_time: 0.2704  memory: 1434  loss: 0.5990  loss_cls: 0.3763  loss_bbox: 0.2227
2025/02/28 02:16:16 - mmengine - INFO - Epoch(train)  [1][405/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:39  time: 0.4396  data_time: 0.2606  memory: 1434  loss: 0.6012  loss_cls: 0.3827  loss_bbox: 0.2185
2025/02/28 02:16:19 - mmengine - INFO - Epoch(train)  [1][410/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:48  time: 0.4590  data_time: 0.2792  memory: 1434  loss: 0.6004  loss_cls: 0.3829  loss_bbox: 0.2175
2025/02/28 02:16:21 - mmengine - INFO - Epoch(train)  [1][415/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:40  time: 0.4536  data_time: 0.2686  memory: 1434  loss: 0.5856  loss_cls: 0.3723  loss_bbox: 0.2133
2025/02/28 02:16:23 - mmengine - INFO - Epoch(train)  [1][420/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:34  time: 0.4527  data_time: 0.2684  memory: 1434  loss: 0.5698  loss_cls: 0.3591  loss_bbox: 0.2107
2025/02/28 02:16:25 - mmengine - INFO - Epoch(train)  [1][425/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:23  time: 0.4330  data_time: 0.2462  memory: 1434  loss: 0.5342  loss_cls: 0.3300  loss_bbox: 0.2042
2025/02/28 02:16:27 - mmengine - INFO - Epoch(train)  [1][430/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:18  time: 0.4392  data_time: 0.2544  memory: 1434  loss: 0.5422  loss_cls: 0.3345  loss_bbox: 0.2077
2025/02/28 02:16:29 - mmengine - INFO - Epoch(train)  [1][435/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:23  time: 0.4513  data_time: 0.2637  memory: 1434  loss: 0.5177  loss_cls: 0.3140  loss_bbox: 0.2037
2025/02/28 02:16:31 - mmengine - INFO - Epoch(train)  [1][440/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:13  time: 0.4498  data_time: 0.2655  memory: 1434  loss: 0.5124  loss_cls: 0.3130  loss_bbox: 0.1994
2025/02/28 02:16:34 - mmengine - INFO - Epoch(train)  [1][445/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:23  time: 0.4464  data_time: 0.2613  memory: 1434  loss: 0.5092  loss_cls: 0.3095  loss_bbox: 0.1997
2025/02/28 02:16:37 - mmengine - INFO - Epoch(train)  [1][450/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:23  time: 0.4597  data_time: 0.2712  memory: 1434  loss: 0.4927  loss_cls: 0.2977  loss_bbox: 0.1950
2025/02/28 02:16:39 - mmengine - INFO - Epoch(train)  [1][455/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:26  time: 0.4647  data_time: 0.2763  memory: 1434  loss: 0.4766  loss_cls: 0.2818  loss_bbox: 0.1947
2025/02/28 02:16:41 - mmengine - INFO - Epoch(train)  [1][460/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:21  time: 0.4536  data_time: 0.2671  memory: 1434  loss: 0.4957  loss_cls: 0.2974  loss_bbox: 0.1984
2025/02/28 02:16:43 - mmengine - INFO - Epoch(train)  [1][465/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:15  time: 0.4554  data_time: 0.2725  memory: 1434  loss: 0.5090  loss_cls: 0.3070  loss_bbox: 0.2020
2025/02/28 02:16:45 - mmengine - INFO - Epoch(train)  [1][470/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:05  time: 0.4515  data_time: 0.2709  memory: 1434  loss: 0.5095  loss_cls: 0.3092  loss_bbox: 0.2003
2025/02/28 02:16:48 - mmengine - INFO - Epoch(train)  [1][475/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:02  time: 0.4576  data_time: 0.2800  memory: 1434  loss: 0.5149  loss_cls: 0.3132  loss_bbox: 0.2017
2025/02/28 02:16:49 - mmengine - INFO - Epoch(train)  [1][480/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:50  time: 0.4509  data_time: 0.2726  memory: 1434  loss: 0.5010  loss_cls: 0.3066  loss_bbox: 0.1944
2025/02/28 02:16:52 - mmengine - INFO - Epoch(train)  [1][485/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:53  time: 0.4499  data_time: 0.2715  memory: 1434  loss: 0.4979  loss_cls: 0.3052  loss_bbox: 0.1927
2025/02/28 02:16:54 - mmengine - INFO - Epoch(train)  [1][490/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:49  time: 0.4539  data_time: 0.2737  memory: 1434  loss: 0.4822  loss_cls: 0.2905  loss_bbox: 0.1918
2025/02/28 02:16:56 - mmengine - INFO - Epoch(train)  [1][495/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:40  time: 0.4380  data_time: 0.2570  memory: 1434  loss: 0.4798  loss_cls: 0.2884  loss_bbox: 0.1914
2025/02/28 02:16:58 - mmengine - INFO - Epoch(train)  [1][500/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:33  time: 0.4329  data_time: 0.2531  memory: 1434  loss: 0.4744  loss_cls: 0.2818  loss_bbox: 0.1925
2025/02/28 02:17:01 - mmengine - INFO - Epoch(train)  [1][505/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:36  time: 0.4323  data_time: 0.2538  memory: 1434  loss: 0.4799  loss_cls: 0.2859  loss_bbox: 0.1940
2025/02/28 02:17:03 - mmengine - INFO - Epoch(train)  [1][510/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:39  time: 0.4391  data_time: 0.2600  memory: 1434  loss: 0.4635  loss_cls: 0.2698  loss_bbox: 0.1936
2025/02/28 02:17:06 - mmengine - INFO - Epoch(train)  [1][515/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:45  time: 0.4497  data_time: 0.2710  memory: 1434  loss: 0.4479  loss_cls: 0.2572  loss_bbox: 0.1906
2025/02/28 02:17:08 - mmengine - INFO - Epoch(train)  [1][520/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:35  time: 0.4487  data_time: 0.2709  memory: 1434  loss: 0.4447  loss_cls: 0.2531  loss_bbox: 0.1916
2025/02/28 02:17:10 - mmengine - INFO - Epoch(train)  [1][525/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:30  time: 0.4468  data_time: 0.2681  memory: 1434  loss: 0.4371  loss_cls: 0.2457  loss_bbox: 0.1914
2025/02/28 02:17:12 - mmengine - INFO - Epoch(train)  [1][530/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:18  time: 0.4461  data_time: 0.2668  memory: 1434  loss: 0.4258  loss_cls: 0.2354  loss_bbox: 0.1904
2025/02/28 02:17:14 - mmengine - INFO - Epoch(train)  [1][535/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:19  time: 0.4442  data_time: 0.2651  memory: 1434  loss: 0.4243  loss_cls: 0.2330  loss_bbox: 0.1913
2025/02/28 02:17:16 - mmengine - INFO - Epoch(train)  [1][540/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:09  time: 0.4393  data_time: 0.2604  memory: 1434  loss: 0.4342  loss_cls: 0.2416  loss_bbox: 0.1926
2025/02/28 02:17:19 - mmengine - INFO - Epoch(train)  [1][545/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:10  time: 0.4475  data_time: 0.2701  memory: 1434  loss: 0.4334  loss_cls: 0.2412  loss_bbox: 0.1922
2025/02/28 02:17:21 - mmengine - INFO - Epoch(train)  [1][550/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:22:03  time: 0.4461  data_time: 0.2690  memory: 1434  loss: 0.4443  loss_cls: 0.2500  loss_bbox: 0.1943
2025/02/28 02:17:23 - mmengine - INFO - Epoch(train)  [1][555/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:21:55  time: 0.4362  data_time: 0.2591  memory: 1434  loss: 0.4490  loss_cls: 0.2514  loss_bbox: 0.1976
2025/02/28 02:17:25 - mmengine - INFO - Epoch(train)  [1][560/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:21:51  time: 0.4298  data_time: 0.2533  memory: 1434  loss: 0.4410  loss_cls: 0.2452  loss_bbox: 0.1958
2025/02/28 02:17:27 - mmengine - INFO - Epoch(train)  [1][565/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:21:55  time: 0.4285  data_time: 0.2518  memory: 1434  loss: 0.4492  loss_cls: 0.2500  loss_bbox: 0.1992
2025/02/28 02:17:29 - mmengine - INFO - Exp name: rtmdet_tiny_1xb4-20e_ycb_20250228_021302
2025/02/28 02:17:29 - mmengine - INFO - Epoch(train)  [1][570/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:21:49  time: 0.4314  data_time: 0.2515  memory: 1434  loss: 0.4539  loss_cls: 0.2496  loss_bbox: 0.2043
2025/02/28 02:17:55 - mmengine - INFO - Epoch(val)  [1][ 5/24]    eta: 0:01:38  time: 5.2017  data_time: 4.5355  memory: 336  
2025/02/28 02:17:58 - mmengine - INFO - Epoch(val)  [1][10/24]    eta: 0:00:39  time: 2.8349  data_time: 2.2688  memory: 336  
2025/02/28 02:18:00 - mmengine - INFO - Epoch(val)  [1][15/24]    eta: 0:00:18  time: 2.0565  data_time: 1.5130  memory: 336  
2025/02/28 02:18:03 - mmengine - INFO - Epoch(val)  [1][20/24]    eta: 0:00:06  time: 1.6665  data_time: 1.1351  memory: 336  
