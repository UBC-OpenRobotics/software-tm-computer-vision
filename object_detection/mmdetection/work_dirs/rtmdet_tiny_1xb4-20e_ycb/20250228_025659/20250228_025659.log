2025/02/28 02:57:02 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1547863278
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.43.34808 for x64
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.11.0
    MMEngine: 0.10.6

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1547863278
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/02/28 02:57:03 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
base_lr = 8e-05
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
custom_hooks = [
    dict(
        switch_epoch=19,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                scale=(
                    640,
                    640,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='PackDetInputs'),
        ],
        type='PipelineSwitchHook'),
]
data_root = 'data/ycb/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=2, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = './checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 20
metainfo = dict(
    classes=(
        'chips_can',
        'master_chef_can',
        'cracker_box',
        'sugar_box',
        'tomato_soup_can',
        'mustard_bottle',
        'tuna_fish_can',
        'pudding_box',
        'gelatin_box',
        'potted_meat_can',
        'banana',
        'strawberry',
        'apple',
        'lemon',
        'peach',
        'pear',
        'orange',
        'plum',
        'pitcher_base',
        'bleach_cleanser',
        'windex_bottle',
        'wine_glass',
        'bowl',
        'mug',
        'sponge',
        'plate',
        'fork',
        'spoon',
        'knife',
        'spatula',
        'power_drill',
        'wood_block',
        'scissors',
        'padlock',
        'key',
        'large_marker',
        'small_marker',
        'adjustable_wrench',
        'phillips_screwdriver',
        'flat_screwdriver',
        'plastic_bolt',
        'plastic_nut',
        'hammer',
        'small_clamp',
        'medium_clamp',
        'large_clamp',
        'extra_large_clamp',
        'mini_soccer_ball',
        'softball',
        'baseball',
        'tennis_ball',
        'racquetball',
        'golf_ball',
        'chain',
        'foam_brick',
        'dice',
        'a_marbles',
        'b_marbles',
        'c_marbles',
        'd_marbles',
        'e_marbles',
        'f_marbles',
        'a_cups',
        'b_cups',
        'c_cups',
        'd_cups',
        'e_cups',
        'f_cups',
        'g_cups',
        'h_cups',
        'i_cups',
        'j_cups',
        'a_colored_wood_blocks',
        'nine_hole_peg_test',
        'a_toy_airplane',
        'b_toy_airplane',
        'c_toy_airplane',
        'd_toy_airplane',
        'e_toy_airplane',
        'f_toy_airplane',
        'g_toy_airplane',
        'h_toy_airplane',
        'i_toy_airplane',
        'j_toy_airplane',
        'k_toy_airplane',
        'a_lego_duplo',
        'b_lego_duplo',
        'c_lego_duplo',
        'd_lego_duplo',
        'e_lego_duplo',
        'f_lego_duplo',
        'g_lego_duplo',
        'h_lego_duplo',
        'i_lego_duplo',
        'j_lego_duplo',
        'k_lego_duplo',
        'l_lego_duplo',
        'm_lego_duplo',
        'timer',
        'rubiks_cube',
    ))
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        channel_attention=True,
        deepen_factor=0.167,
        expand_ratio=0.5,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth',
            prefix='backbone.',
            type='Pretrained'),
        norm_cfg=dict(type='SyncBN'),
        type='CSPNeXt',
        widen_factor=0.375),
    bbox_head=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        anchor_generator=dict(
            offset=0, strides=[
                8,
                16,
                32,
            ], type='MlvlPointGenerator'),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        exp_on_reg=False,
        feat_channels=96,
        in_channels=96,
        loss_bbox=dict(loss_weight=2.0, type='GIoULoss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='QualityFocalLoss',
            use_sigmoid=True),
        norm_cfg=dict(type='SyncBN'),
        num_classes=100,
        pred_kernel_size=1,
        share_conv=True,
        stacked_convs=2,
        type='RTMDetSepBNHead',
        with_objectness=False),
    data_preprocessor=dict(
        batch_augments=None,
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        expand_ratio=0.5,
        in_channels=[
            96,
            192,
            384,
        ],
        norm_cfg=dict(type='SyncBN'),
        num_csp_blocks=1,
        out_channels=96,
        type='CSPNeXtPAFPN'),
    test_cfg=dict(
        max_per_img=300,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.65, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(topk=13, type='DynamicSoftLabelAssigner'),
        debug=False,
        pos_weight=-1),
    type='RTMDet')
optim_wrapper = dict(
    optimizer=dict(lr=8e-05, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        bias_decay_mult=0, bypass_duplicate=True, norm_decay_mult=0),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=10, start_factor=1e-05, type='LinearLR'),
    dict(
        T_max=10,
        begin=10,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=4.000000000000001e-06,
        type='CosineAnnealingLR'),
]
resume = False
stage2_num_epochs = 1
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'a_marbles',
                'b_marbles',
                'c_marbles',
                'd_marbles',
                'e_marbles',
                'f_marbles',
                'a_cups',
                'b_cups',
                'c_cups',
                'd_cups',
                'e_cups',
                'f_cups',
                'g_cups',
                'h_cups',
                'i_cups',
                'j_cups',
                'a_colored_wood_blocks',
                'nine_hole_peg_test',
                'a_toy_airplane',
                'b_toy_airplane',
                'c_toy_airplane',
                'd_toy_airplane',
                'e_toy_airplane',
                'f_toy_airplane',
                'g_toy_airplane',
                'h_toy_airplane',
                'i_toy_airplane',
                'j_toy_airplane',
                'k_toy_airplane',
                'a_lego_duplo',
                'b_lego_duplo',
                'c_lego_duplo',
                'd_lego_duplo',
                'e_lego_duplo',
                'f_lego_duplo',
                'g_lego_duplo',
                'h_lego_duplo',
                'i_lego_duplo',
                'j_lego_duplo',
                'k_lego_duplo',
                'l_lego_duplo',
                'm_lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        640,
        640,
    ), type='Resize'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_batch_size_per_gpu = 4
train_cfg = dict(
    dynamic_intervals=[
        (
            280,
            1,
        ),
    ],
    max_epochs=20,
    type='EpochBasedTrainLoop',
    val_interval=1)
train_dataloader = dict(
    batch_sampler=None,
    batch_size=4,
    dataset=dict(
        ann_file='train.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='data/ycb/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'a_marbles',
                'b_marbles',
                'c_marbles',
                'd_marbles',
                'e_marbles',
                'f_marbles',
                'a_cups',
                'b_cups',
                'c_cups',
                'd_cups',
                'e_cups',
                'f_cups',
                'g_cups',
                'h_cups',
                'i_cups',
                'j_cups',
                'a_colored_wood_blocks',
                'nine_hole_peg_test',
                'a_toy_airplane',
                'b_toy_airplane',
                'c_toy_airplane',
                'd_toy_airplane',
                'e_toy_airplane',
                'f_toy_airplane',
                'g_toy_airplane',
                'h_toy_airplane',
                'i_toy_airplane',
                'j_toy_airplane',
                'k_toy_airplane',
                'a_lego_duplo',
                'b_lego_duplo',
                'c_lego_duplo',
                'd_lego_duplo',
                'e_lego_duplo',
                'f_lego_duplo',
                'g_lego_duplo',
                'h_lego_duplo',
                'i_lego_duplo',
                'j_lego_duplo',
                'k_lego_duplo',
                'l_lego_duplo',
                'm_lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=20,
                pad_val=114.0,
                random_pop=False,
                type='CachedMosaic'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    1280,
                    1280,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=10,
                pad_val=(
                    114,
                    114,
                    114,
                ),
                prob=0.5,
                random_pop=False,
                ratio_range=(
                    1.0,
                    1.0,
                ),
                type='CachedMixUp'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 2
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=20,
        pad_val=114.0,
        random_pop=False,
        type='CachedMosaic'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            1280,
            1280,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=10,
        pad_val=(
            114,
            114,
            114,
        ),
        prob=0.5,
        random_pop=False,
        ratio_range=(
            1.0,
            1.0,
        ),
        type='CachedMixUp'),
    dict(type='PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        scale=(
            640,
            640,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.6, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    640,
                    640,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    320,
                    320,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    960,
                    960,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(
                    pad_val=dict(img=(
                        114,
                        114,
                        114,
                    )),
                    size=(
                        960,
                        960,
                    ),
                    type='Pad'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_bolt',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'a_marbles',
                'b_marbles',
                'c_marbles',
                'd_marbles',
                'e_marbles',
                'f_marbles',
                'a_cups',
                'b_cups',
                'c_cups',
                'd_cups',
                'e_cups',
                'f_cups',
                'g_cups',
                'h_cups',
                'i_cups',
                'j_cups',
                'a_colored_wood_blocks',
                'nine_hole_peg_test',
                'a_toy_airplane',
                'b_toy_airplane',
                'c_toy_airplane',
                'd_toy_airplane',
                'e_toy_airplane',
                'f_toy_airplane',
                'g_toy_airplane',
                'h_toy_airplane',
                'i_toy_airplane',
                'j_toy_airplane',
                'k_toy_airplane',
                'a_lego_duplo',
                'b_lego_duplo',
                'c_lego_duplo',
                'd_lego_duplo',
                'e_lego_duplo',
                'f_lego_duplo',
                'g_lego_duplo',
                'h_lego_duplo',
                'i_lego_duplo',
                'j_lego_duplo',
                'k_lego_duplo',
                'l_lego_duplo',
                'm_lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs\\rtmdet_tiny_1xb4-20e_ycb'

2025/02/28 02:57:06 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/02/28 02:57:06 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2025/02/28 02:57:07 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2025/02/28 02:57:08 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([100, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([100]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2025/02/28 02:57:08 - mmengine - INFO - Load checkpoint from ./checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2025/02/28 02:57:08 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/02/28 02:57:08 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/02/28 02:57:08 - mmengine - INFO - Checkpoints will be saved to C:\Users\kevin\Documents\OpenRobotics\detection\mmdetection\work_dirs\rtmdet_tiny_1xb4-20e_ycb.
2025/02/28 02:57:16 - mmengine - INFO - Epoch(train)  [1][  5/570]  base_lr: 3.5556e-05 lr: 3.5556e-05  eta: 5:06:11  time: 1.6123  data_time: 1.1405  memory: 1434  loss: 2.8598  loss_cls: 2.1495  loss_bbox: 0.7103
2025/02/28 02:57:18 - mmengine - INFO - Epoch(train)  [1][ 10/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 3:16:41  time: 1.0361  data_time: 0.7008  memory: 1434  loss: 2.7929  loss_cls: 2.0847  loss_bbox: 0.7082
2025/02/28 02:57:20 - mmengine - INFO - Epoch(train)  [1][ 15/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:33:00  time: 0.8063  data_time: 0.5256  memory: 1434  loss: 2.8198  loss_cls: 2.1370  loss_bbox: 0.6829
2025/02/28 02:57:22 - mmengine - INFO - Epoch(train)  [1][ 20/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:16:00  time: 0.7171  data_time: 0.4649  memory: 1434  loss: 2.8382  loss_cls: 2.1661  loss_bbox: 0.6721
2025/02/28 02:57:24 - mmengine - INFO - Epoch(train)  [1][ 25/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2:03:45  time: 0.6527  data_time: 0.4127  memory: 1434  loss: 2.8669  loss_cls: 2.2161  loss_bbox: 0.6508
2025/02/28 02:57:26 - mmengine - INFO - Epoch(train)  [1][ 30/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:57:02  time: 0.6177  data_time: 0.3861  memory: 1434  loss: 2.8833  loss_cls: 2.2498  loss_bbox: 0.6335
2025/02/28 02:57:28 - mmengine - INFO - Epoch(train)  [1][ 35/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:50:10  time: 0.5817  data_time: 0.3567  memory: 1434  loss: 2.8845  loss_cls: 2.2625  loss_bbox: 0.6220
2025/02/28 02:57:31 - mmengine - INFO - Epoch(train)  [1][ 40/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:47:55  time: 0.5700  data_time: 0.3497  memory: 1434  loss: 2.8911  loss_cls: 2.2807  loss_bbox: 0.6104
2025/02/28 02:57:33 - mmengine - INFO - Epoch(train)  [1][ 45/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:46:25  time: 0.5623  data_time: 0.3447  memory: 1434  loss: 2.9015  loss_cls: 2.3045  loss_bbox: 0.5970
2025/02/28 02:57:35 - mmengine - INFO - Epoch(train)  [1][ 50/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:43:16  time: 0.5459  data_time: 0.3308  memory: 1434  loss: 2.9032  loss_cls: 2.3169  loss_bbox: 0.5863
2025/02/28 02:57:37 - mmengine - INFO - Epoch(train)  [1][ 55/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:40:49  time: 0.4253  data_time: 0.2388  memory: 1434  loss: 2.9089  loss_cls: 2.3510  loss_bbox: 0.5579
2025/02/28 02:57:39 - mmengine - INFO - Epoch(train)  [1][ 60/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:39:25  time: 0.4240  data_time: 0.2390  memory: 1434  loss: 2.9174  loss_cls: 2.3883  loss_bbox: 0.5291
2025/02/28 02:57:42 - mmengine - INFO - Epoch(train)  [1][ 65/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:38:24  time: 0.4352  data_time: 0.2448  memory: 1434  loss: 2.9050  loss_cls: 2.3959  loss_bbox: 0.5091
2025/02/28 02:57:44 - mmengine - INFO - Epoch(train)  [1][ 70/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:37:26  time: 0.4356  data_time: 0.2412  memory: 1434  loss: 2.8948  loss_cls: 2.4085  loss_bbox: 0.4863
2025/02/28 02:57:46 - mmengine - INFO - Epoch(train)  [1][ 75/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:36  time: 0.4334  data_time: 0.2386  memory: 1434  loss: 2.8506  loss_cls: 2.3847  loss_bbox: 0.4658
2025/02/28 02:57:49 - mmengine - INFO - Epoch(train)  [1][ 80/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:36:14  time: 0.4456  data_time: 0.2494  memory: 1434  loss: 2.7947  loss_cls: 2.3488  loss_bbox: 0.4459
2025/02/28 02:57:51 - mmengine - INFO - Epoch(train)  [1][ 85/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:46  time: 0.4472  data_time: 0.2499  memory: 1434  loss: 2.7564  loss_cls: 2.3290  loss_bbox: 0.4275
2025/02/28 02:57:53 - mmengine - INFO - Epoch(train)  [1][ 90/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:34:20  time: 0.4450  data_time: 0.2466  memory: 1434  loss: 2.7030  loss_cls: 2.2954  loss_bbox: 0.4076
2025/02/28 02:57:56 - mmengine - INFO - Epoch(train)  [1][ 95/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:35:14  time: 0.4544  data_time: 0.2537  memory: 1434  loss: 2.6259  loss_cls: 2.2316  loss_bbox: 0.3943
2025/02/28 02:57:57 - mmengine - INFO - Epoch(train)  [1][100/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:33:24  time: 0.4460  data_time: 0.2472  memory: 1434  loss: 2.5649  loss_cls: 2.1901  loss_bbox: 0.3747
2025/02/28 02:58:00 - mmengine - INFO - Epoch(train)  [1][105/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:33:14  time: 0.4535  data_time: 0.2563  memory: 1434  loss: 2.4766  loss_cls: 2.1153  loss_bbox: 0.3612
2025/02/28 02:58:01 - mmengine - INFO - Epoch(train)  [1][110/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:49  time: 0.4423  data_time: 0.2448  memory: 1434  loss: 2.4046  loss_cls: 2.0525  loss_bbox: 0.3522
2025/02/28 02:58:04 - mmengine - INFO - Epoch(train)  [1][115/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:31:16  time: 0.4391  data_time: 0.2467  memory: 1434  loss: 2.2987  loss_cls: 1.9580  loss_bbox: 0.3407
2025/02/28 02:58:06 - mmengine - INFO - Epoch(train)  [1][120/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:50  time: 0.4372  data_time: 0.2478  memory: 1434  loss: 2.1837  loss_cls: 1.8532  loss_bbox: 0.3305
2025/02/28 02:58:08 - mmengine - INFO - Epoch(train)  [1][125/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:43  time: 0.4471  data_time: 0.2582  memory: 1434  loss: 2.0923  loss_cls: 1.7666  loss_bbox: 0.3257
2025/02/28 02:58:10 - mmengine - INFO - Epoch(train)  [1][130/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:29  time: 0.4363  data_time: 0.2495  memory: 1434  loss: 1.9920  loss_cls: 1.6763  loss_bbox: 0.3157
2025/02/28 02:58:13 - mmengine - INFO - Epoch(train)  [1][135/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:30:04  time: 0.4409  data_time: 0.2545  memory: 1434  loss: 1.8683  loss_cls: 1.5659  loss_bbox: 0.3024
2025/02/28 02:58:14 - mmengine - INFO - Epoch(train)  [1][140/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:21  time: 0.4324  data_time: 0.2478  memory: 1434  loss: 1.7459  loss_cls: 1.4528  loss_bbox: 0.2932
2025/02/28 02:58:17 - mmengine - INFO - Epoch(train)  [1][145/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:59  time: 0.4153  data_time: 0.2315  memory: 1434  loss: 1.6677  loss_cls: 1.3828  loss_bbox: 0.2850
2025/02/28 02:58:19 - mmengine - INFO - Epoch(train)  [1][150/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:58  time: 0.4317  data_time: 0.2463  memory: 1434  loss: 1.5514  loss_cls: 1.2719  loss_bbox: 0.2795
2025/02/28 02:58:21 - mmengine - INFO - Epoch(train)  [1][155/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:01  time: 0.4326  data_time: 0.2429  memory: 1434  loss: 1.4526  loss_cls: 1.1787  loss_bbox: 0.2739
2025/02/28 02:58:24 - mmengine - INFO - Epoch(train)  [1][160/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:29:10  time: 0.4496  data_time: 0.2588  memory: 1434  loss: 1.3379  loss_cls: 1.0732  loss_bbox: 0.2647
2025/02/28 02:58:26 - mmengine - INFO - Epoch(train)  [1][165/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:42  time: 0.4472  data_time: 0.2543  memory: 1434  loss: 1.2554  loss_cls: 0.9988  loss_bbox: 0.2566
2025/02/28 02:58:28 - mmengine - INFO - Epoch(train)  [1][170/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:50  time: 0.4542  data_time: 0.2627  memory: 1434  loss: 1.1759  loss_cls: 0.9279  loss_bbox: 0.2480
2025/02/28 02:58:30 - mmengine - INFO - Epoch(train)  [1][175/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:15  time: 0.4444  data_time: 0.2570  memory: 1434  loss: 1.1154  loss_cls: 0.8743  loss_bbox: 0.2412
2025/02/28 02:58:33 - mmengine - INFO - Epoch(train)  [1][180/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:28:06  time: 0.4437  data_time: 0.2578  memory: 1434  loss: 1.0852  loss_cls: 0.8411  loss_bbox: 0.2441
2025/02/28 02:58:35 - mmengine - INFO - Epoch(train)  [1][185/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:47  time: 0.4426  data_time: 0.2565  memory: 1434  loss: 1.0683  loss_cls: 0.8229  loss_bbox: 0.2454
2025/02/28 02:58:37 - mmengine - INFO - Epoch(train)  [1][190/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:47  time: 0.4523  data_time: 0.2655  memory: 1434  loss: 1.0347  loss_cls: 0.7943  loss_bbox: 0.2404
2025/02/28 02:58:39 - mmengine - INFO - Epoch(train)  [1][195/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:09  time: 0.4444  data_time: 0.2613  memory: 1434  loss: 0.9885  loss_cls: 0.7508  loss_bbox: 0.2377
2025/02/28 02:58:41 - mmengine - INFO - Epoch(train)  [1][200/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:05  time: 0.4425  data_time: 0.2629  memory: 1434  loss: 0.9512  loss_cls: 0.7158  loss_bbox: 0.2354
2025/02/28 02:58:43 - mmengine - INFO - Epoch(train)  [1][205/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:05  time: 0.4409  data_time: 0.2636  memory: 1434  loss: 0.9342  loss_cls: 0.6990  loss_bbox: 0.2352
2025/02/28 02:58:46 - mmengine - INFO - Epoch(train)  [1][210/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:14  time: 0.4415  data_time: 0.2665  memory: 1434  loss: 0.9254  loss_cls: 0.6882  loss_bbox: 0.2372
2025/02/28 02:58:48 - mmengine - INFO - Epoch(train)  [1][215/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:59  time: 0.4431  data_time: 0.2691  memory: 1434  loss: 0.9237  loss_cls: 0.6883  loss_bbox: 0.2354
2025/02/28 02:58:51 - mmengine - INFO - Epoch(train)  [1][220/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:27:06  time: 0.4430  data_time: 0.2688  memory: 1434  loss: 0.9150  loss_cls: 0.6777  loss_bbox: 0.2373
2025/02/28 02:58:53 - mmengine - INFO - Epoch(train)  [1][225/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:46  time: 0.4454  data_time: 0.2656  memory: 1434  loss: 0.8813  loss_cls: 0.6482  loss_bbox: 0.2331
2025/02/28 02:58:55 - mmengine - INFO - Epoch(train)  [1][230/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:55  time: 0.4516  data_time: 0.2697  memory: 1434  loss: 0.8511  loss_cls: 0.6214  loss_bbox: 0.2297
2025/02/28 02:58:57 - mmengine - INFO - Epoch(train)  [1][235/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:33  time: 0.4485  data_time: 0.2685  memory: 1434  loss: 0.8218  loss_cls: 0.5959  loss_bbox: 0.2259
2025/02/28 02:59:00 - mmengine - INFO - Epoch(train)  [1][240/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:50  time: 0.4555  data_time: 0.2774  memory: 1434  loss: 0.8210  loss_cls: 0.5931  loss_bbox: 0.2279
2025/02/28 02:59:02 - mmengine - INFO - Epoch(train)  [1][245/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:24  time: 0.4573  data_time: 0.2793  memory: 1434  loss: 0.7983  loss_cls: 0.5714  loss_bbox: 0.2269
2025/02/28 02:59:04 - mmengine - INFO - Epoch(train)  [1][250/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:25  time: 0.4590  data_time: 0.2783  memory: 1434  loss: 0.7982  loss_cls: 0.5703  loss_bbox: 0.2279
2025/02/28 02:59:06 - mmengine - INFO - Epoch(train)  [1][255/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:05  time: 0.4500  data_time: 0.2711  memory: 1434  loss: 0.7898  loss_cls: 0.5624  loss_bbox: 0.2274
2025/02/28 02:59:08 - mmengine - INFO - Epoch(train)  [1][260/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:26:05  time: 0.4464  data_time: 0.2686  memory: 1434  loss: 0.7922  loss_cls: 0.5636  loss_bbox: 0.2286
2025/02/28 02:59:10 - mmengine - INFO - Epoch(train)  [1][265/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:51  time: 0.4457  data_time: 0.2670  memory: 1434  loss: 0.7658  loss_cls: 0.5369  loss_bbox: 0.2289
2025/02/28 02:59:13 - mmengine - INFO - Epoch(train)  [1][270/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:55  time: 0.4443  data_time: 0.2646  memory: 1434  loss: 0.7586  loss_cls: 0.5319  loss_bbox: 0.2268
2025/02/28 02:59:15 - mmengine - INFO - Epoch(train)  [1][275/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:50  time: 0.4495  data_time: 0.2718  memory: 1434  loss: 0.7685  loss_cls: 0.5362  loss_bbox: 0.2324
2025/02/28 02:59:17 - mmengine - INFO - Epoch(train)  [1][280/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:45  time: 0.4438  data_time: 0.2636  memory: 1434  loss: 0.7670  loss_cls: 0.5363  loss_bbox: 0.2307
2025/02/28 02:59:19 - mmengine - INFO - Epoch(train)  [1][285/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:27  time: 0.4430  data_time: 0.2619  memory: 1434  loss: 0.7532  loss_cls: 0.5224  loss_bbox: 0.2309
2025/02/28 02:59:22 - mmengine - INFO - Epoch(train)  [1][290/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:41  time: 0.4431  data_time: 0.2604  memory: 1434  loss: 0.7355  loss_cls: 0.5047  loss_bbox: 0.2308
2025/02/28 02:59:24 - mmengine - INFO - Epoch(train)  [1][295/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:36  time: 0.4513  data_time: 0.2670  memory: 1434  loss: 0.7232  loss_cls: 0.4961  loss_bbox: 0.2270
2025/02/28 02:59:27 - mmengine - INFO - Epoch(train)  [1][300/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:36  time: 0.4515  data_time: 0.2690  memory: 1434  loss: 0.7179  loss_cls: 0.4931  loss_bbox: 0.2248
2025/02/28 02:59:29 - mmengine - INFO - Epoch(train)  [1][305/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:19  time: 0.4512  data_time: 0.2683  memory: 1434  loss: 0.7070  loss_cls: 0.4852  loss_bbox: 0.2218
2025/02/28 02:59:31 - mmengine - INFO - Epoch(train)  [1][310/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:32  time: 0.4582  data_time: 0.2720  memory: 1434  loss: 0.6866  loss_cls: 0.4714  loss_bbox: 0.2152
2025/02/28 02:59:33 - mmengine - INFO - Epoch(train)  [1][315/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:22  time: 0.4591  data_time: 0.2712  memory: 1434  loss: 0.6957  loss_cls: 0.4812  loss_bbox: 0.2145
2025/02/28 02:59:37 - mmengine - INFO - Epoch(train)  [1][320/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:56  time: 0.4771  data_time: 0.2850  memory: 1434  loss: 0.6879  loss_cls: 0.4733  loss_bbox: 0.2146
2025/02/28 02:59:39 - mmengine - INFO - Epoch(train)  [1][325/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:48  time: 0.4758  data_time: 0.2827  memory: 1434  loss: 0.6767  loss_cls: 0.4636  loss_bbox: 0.2130
2025/02/28 02:59:41 - mmengine - INFO - Epoch(train)  [1][330/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:45  time: 0.4760  data_time: 0.2862  memory: 1434  loss: 0.6639  loss_cls: 0.4529  loss_bbox: 0.2110
2025/02/28 02:59:43 - mmengine - INFO - Epoch(train)  [1][335/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:35  time: 0.4801  data_time: 0.2881  memory: 1434  loss: 0.6539  loss_cls: 0.4440  loss_bbox: 0.2098
2025/02/28 02:59:46 - mmengine - INFO - Epoch(train)  [1][340/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:39  time: 0.4759  data_time: 0.2834  memory: 1434  loss: 0.6539  loss_cls: 0.4440  loss_bbox: 0.2099
2025/02/28 02:59:49 - mmengine - INFO - Epoch(train)  [1][345/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:58  time: 0.4906  data_time: 0.2965  memory: 1434  loss: 0.6441  loss_cls: 0.4359  loss_bbox: 0.2082
2025/02/28 02:59:51 - mmengine - INFO - Epoch(train)  [1][350/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:55  time: 0.4890  data_time: 0.2895  memory: 1434  loss: 0.6250  loss_cls: 0.4193  loss_bbox: 0.2057
2025/02/28 02:59:53 - mmengine - INFO - Epoch(train)  [1][355/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:53  time: 0.4983  data_time: 0.2991  memory: 1434  loss: 0.6157  loss_cls: 0.4110  loss_bbox: 0.2047
2025/02/28 02:59:56 - mmengine - INFO - Epoch(train)  [1][360/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:44  time: 0.4859  data_time: 0.2876  memory: 1434  loss: 0.6091  loss_cls: 0.4023  loss_bbox: 0.2068
2025/02/28 02:59:58 - mmengine - INFO - Epoch(train)  [1][365/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:45  time: 0.4924  data_time: 0.2972  memory: 1434  loss: 0.5915  loss_cls: 0.3867  loss_bbox: 0.2048
2025/02/28 03:00:00 - mmengine - INFO - Epoch(train)  [1][370/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:25  time: 0.4605  data_time: 0.2705  memory: 1434  loss: 0.5791  loss_cls: 0.3786  loss_bbox: 0.2005
2025/02/28 03:00:02 - mmengine - INFO - Epoch(train)  [1][375/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:26  time: 0.4654  data_time: 0.2775  memory: 1434  loss: 0.5637  loss_cls: 0.3694  loss_bbox: 0.1943
2025/02/28 03:00:04 - mmengine - INFO - Epoch(train)  [1][380/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:19  time: 0.4630  data_time: 0.2749  memory: 1434  loss: 0.5586  loss_cls: 0.3670  loss_bbox: 0.1916
2025/02/28 03:00:07 - mmengine - INFO - Epoch(train)  [1][385/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:23  time: 0.4724  data_time: 0.2866  memory: 1434  loss: 0.5672  loss_cls: 0.3760  loss_bbox: 0.1912
2025/02/28 03:00:09 - mmengine - INFO - Epoch(train)  [1][390/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:25:07  time: 0.4586  data_time: 0.2735  memory: 1434  loss: 0.5607  loss_cls: 0.3693  loss_bbox: 0.1914
2025/02/28 03:00:11 - mmengine - INFO - Epoch(train)  [1][395/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:59  time: 0.4412  data_time: 0.2589  memory: 1434  loss: 0.5565  loss_cls: 0.3635  loss_bbox: 0.1930
2025/02/28 03:00:13 - mmengine - INFO - Epoch(train)  [1][400/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:46  time: 0.4337  data_time: 0.2548  memory: 1434  loss: 0.5525  loss_cls: 0.3587  loss_bbox: 0.1938
2025/02/28 03:00:15 - mmengine - INFO - Epoch(train)  [1][405/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:43  time: 0.4321  data_time: 0.2498  memory: 1434  loss: 0.5399  loss_cls: 0.3476  loss_bbox: 0.1922
2025/02/28 03:00:18 - mmengine - INFO - Epoch(train)  [1][410/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:54  time: 0.4461  data_time: 0.2630  memory: 1434  loss: 0.5369  loss_cls: 0.3476  loss_bbox: 0.1894
2025/02/28 03:00:20 - mmengine - INFO - Epoch(train)  [1][415/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:39  time: 0.4339  data_time: 0.2498  memory: 1434  loss: 0.5346  loss_cls: 0.3461  loss_bbox: 0.1885
2025/02/28 03:00:22 - mmengine - INFO - Epoch(train)  [1][420/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:44  time: 0.4510  data_time: 0.2652  memory: 1434  loss: 0.5419  loss_cls: 0.3507  loss_bbox: 0.1912
2025/02/28 03:00:25 - mmengine - INFO - Epoch(train)  [1][425/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:40  time: 0.4473  data_time: 0.2581  memory: 1434  loss: 0.5496  loss_cls: 0.3549  loss_bbox: 0.1946
2025/02/28 03:00:27 - mmengine - INFO - Epoch(train)  [1][430/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:41  time: 0.4528  data_time: 0.2637  memory: 1434  loss: 0.5430  loss_cls: 0.3465  loss_bbox: 0.1965
2025/02/28 03:00:29 - mmengine - INFO - Epoch(train)  [1][435/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:27  time: 0.4391  data_time: 0.2480  memory: 1434  loss: 0.5335  loss_cls: 0.3360  loss_bbox: 0.1975
2025/02/28 03:00:32 - mmengine - INFO - Epoch(train)  [1][440/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:36  time: 0.4573  data_time: 0.2658  memory: 1434  loss: 0.5275  loss_cls: 0.3338  loss_bbox: 0.1937
2025/02/28 03:00:34 - mmengine - INFO - Epoch(train)  [1][445/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:31  time: 0.4593  data_time: 0.2658  memory: 1434  loss: 0.5349  loss_cls: 0.3424  loss_bbox: 0.1925
2025/02/28 03:00:36 - mmengine - INFO - Epoch(train)  [1][450/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:38  time: 0.4743  data_time: 0.2791  memory: 1434  loss: 0.5369  loss_cls: 0.3441  loss_bbox: 0.1928
2025/02/28 03:00:39 - mmengine - INFO - Epoch(train)  [1][455/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:35  time: 0.4744  data_time: 0.2798  memory: 1434  loss: 0.5479  loss_cls: 0.3535  loss_bbox: 0.1944
2025/02/28 03:00:41 - mmengine - INFO - Epoch(train)  [1][460/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:30  time: 0.4631  data_time: 0.2690  memory: 1434  loss: 0.5354  loss_cls: 0.3439  loss_bbox: 0.1915
2025/02/28 03:00:43 - mmengine - INFO - Epoch(train)  [1][465/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:18  time: 0.4650  data_time: 0.2726  memory: 1434  loss: 0.5350  loss_cls: 0.3438  loss_bbox: 0.1912
2025/02/28 03:00:45 - mmengine - INFO - Epoch(train)  [1][470/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:12  time: 0.4555  data_time: 0.2645  memory: 1434  loss: 0.5241  loss_cls: 0.3324  loss_bbox: 0.1917
2025/02/28 03:00:47 - mmengine - INFO - Epoch(train)  [1][475/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:06  time: 0.4534  data_time: 0.2651  memory: 1434  loss: 0.5276  loss_cls: 0.3353  loss_bbox: 0.1923
2025/02/28 03:00:50 - mmengine - INFO - Epoch(train)  [1][480/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:09  time: 0.4555  data_time: 0.2643  memory: 1434  loss: 0.5328  loss_cls: 0.3380  loss_bbox: 0.1948
2025/02/28 03:00:52 - mmengine - INFO - Epoch(train)  [1][485/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:10  time: 0.4671  data_time: 0.2780  memory: 1434  loss: 0.5148  loss_cls: 0.3249  loss_bbox: 0.1899
2025/02/28 03:00:54 - mmengine - INFO - Epoch(train)  [1][490/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:57  time: 0.4492  data_time: 0.2604  memory: 1434  loss: 0.5096  loss_cls: 0.3170  loss_bbox: 0.1926
2025/02/28 03:00:57 - mmengine - INFO - Epoch(train)  [1][495/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:09  time: 0.4638  data_time: 0.2774  memory: 1434  loss: 0.5011  loss_cls: 0.3071  loss_bbox: 0.1940
2025/02/28 03:00:59 - mmengine - INFO - Epoch(train)  [1][500/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:59  time: 0.4497  data_time: 0.2656  memory: 1434  loss: 0.4961  loss_cls: 0.3023  loss_bbox: 0.1939
2025/02/28 03:01:01 - mmengine - INFO - Epoch(train)  [1][505/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:24:00  time: 0.4528  data_time: 0.2703  memory: 1434  loss: 0.4848  loss_cls: 0.2903  loss_bbox: 0.1945
2025/02/28 03:01:03 - mmengine - INFO - Epoch(train)  [1][510/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:51  time: 0.4482  data_time: 0.2662  memory: 1434  loss: 0.4898  loss_cls: 0.2941  loss_bbox: 0.1957
2025/02/28 03:01:06 - mmengine - INFO - Epoch(train)  [1][515/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:59  time: 0.4660  data_time: 0.2836  memory: 1434  loss: 0.5034  loss_cls: 0.3032  loss_bbox: 0.2002
2025/02/28 03:01:08 - mmengine - INFO - Epoch(train)  [1][520/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:46  time: 0.4597  data_time: 0.2755  memory: 1434  loss: 0.5009  loss_cls: 0.3050  loss_bbox: 0.1959
2025/02/28 03:01:10 - mmengine - INFO - Epoch(train)  [1][525/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:45  time: 0.4641  data_time: 0.2776  memory: 1434  loss: 0.4854  loss_cls: 0.2955  loss_bbox: 0.1899
2025/02/28 03:01:12 - mmengine - INFO - Epoch(train)  [1][530/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:34  time: 0.4511  data_time: 0.2658  memory: 1434  loss: 0.4658  loss_cls: 0.2814  loss_bbox: 0.1844
2025/02/28 03:01:15 - mmengine - INFO - Epoch(train)  [1][535/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:45  time: 0.4611  data_time: 0.2784  memory: 1434  loss: 0.4660  loss_cls: 0.2807  loss_bbox: 0.1853
2025/02/28 03:01:17 - mmengine - INFO - Epoch(train)  [1][540/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:37  time: 0.4650  data_time: 0.2825  memory: 1434  loss: 0.4628  loss_cls: 0.2806  loss_bbox: 0.1822
2025/02/28 03:01:20 - mmengine - INFO - Epoch(train)  [1][545/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:40  time: 0.4572  data_time: 0.2753  memory: 1434  loss: 0.4675  loss_cls: 0.2861  loss_bbox: 0.1814
2025/02/28 03:01:22 - mmengine - INFO - Epoch(train)  [1][550/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:34  time: 0.4608  data_time: 0.2781  memory: 1434  loss: 0.4732  loss_cls: 0.2910  loss_bbox: 0.1822
2025/02/28 03:01:24 - mmengine - INFO - Epoch(train)  [1][555/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:30  time: 0.4556  data_time: 0.2742  memory: 1434  loss: 0.4688  loss_cls: 0.2885  loss_bbox: 0.1804
2025/02/28 03:01:26 - mmengine - INFO - Epoch(train)  [1][560/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:22  time: 0.4560  data_time: 0.2746  memory: 1434  loss: 0.4579  loss_cls: 0.2772  loss_bbox: 0.1808
2025/02/28 03:01:29 - mmengine - INFO - Epoch(train)  [1][565/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:21  time: 0.4471  data_time: 0.2670  memory: 1434  loss: 0.4372  loss_cls: 0.2613  loss_bbox: 0.1759
2025/02/28 03:01:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb4-20e_ycb_20250228_025659
2025/02/28 03:01:31 - mmengine - INFO - Epoch(train)  [1][570/570]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1:23:15  time: 0.4536  data_time: 0.2744  memory: 1434  loss: 0.4368  loss_cls: 0.2584  loss_bbox: 0.1784
2025/02/28 03:01:57 - mmengine - INFO - Epoch(val)  [1][ 5/24]    eta: 0:01:39  time: 5.2257  data_time: 4.5873  memory: 336  
2025/02/28 03:01:59 - mmengine - INFO - Epoch(val)  [1][10/24]    eta: 0:00:39  time: 2.8428  data_time: 2.2948  memory: 336  
2025/02/28 03:02:02 - mmengine - INFO - Epoch(val)  [1][15/24]    eta: 0:00:18  time: 2.0625  data_time: 1.5302  memory: 336  
2025/02/28 03:02:04 - mmengine - INFO - Epoch(val)  [1][20/24]    eta: 0:00:06  time: 1.6595  data_time: 1.1482  memory: 336  
