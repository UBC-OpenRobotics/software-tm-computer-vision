2025/02/28 20:37:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1004933550
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.43.34808 for x64
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.11.0
    MMEngine: 0.10.6

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1004933550
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/02/28 20:37:15 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
base_lr = 8e-05
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
custom_hooks = [
    dict(
        switch_epoch=19,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                scale=(
                    640,
                    640,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='PackDetInputs'),
        ],
        type='PipelineSwitchHook'),
]
data_root = 'data/ycb/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=2, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = './checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 20
metainfo = dict(
    classes=(
        'chips_can',
        'master_chef_can',
        'cracker_box',
        'sugar_box',
        'tomato_soup_can',
        'mustard_bottle',
        'tuna_fish_can',
        'pudding_box',
        'gelatin_box',
        'potted_meat_can',
        'banana',
        'strawberry',
        'apple',
        'lemon',
        'peach',
        'pear',
        'orange',
        'plum',
        'pitcher_base',
        'bleach_cleanser',
        'windex_bottle',
        'wine_glass',
        'bowl',
        'mug',
        'sponge',
        'plate',
        'fork',
        'spoon',
        'knife',
        'spatula',
        'power_drill',
        'wood_block',
        'scissors',
        'padlock',
        'key',
        'large_marker',
        'small_marker',
        'adjustable_wrench',
        'phillips_screwdriver',
        'flat_screwdriver',
        'plastic_nut',
        'hammer',
        'small_clamp',
        'medium_clamp',
        'large_clamp',
        'extra_large_clamp',
        'mini_soccer_ball',
        'softball',
        'baseball',
        'tennis_ball',
        'racquetball',
        'golf_ball',
        'chain',
        'foam_brick',
        'dice',
        'marbles',
        'cups',
        'colored_wood_blocks',
        'nine_hole_peg_test',
        'toy_airplane',
        'lego_duplo',
        'timer',
        'rubiks_cube',
    ))
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        channel_attention=True,
        deepen_factor=0.167,
        expand_ratio=0.5,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth',
            prefix='backbone.',
            type='Pretrained'),
        norm_cfg=dict(type='SyncBN'),
        type='CSPNeXt',
        widen_factor=0.375),
    bbox_head=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        anchor_generator=dict(
            offset=0, strides=[
                8,
                16,
                32,
            ], type='MlvlPointGenerator'),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        exp_on_reg=False,
        feat_channels=96,
        in_channels=96,
        loss_bbox=dict(loss_weight=2.0, type='GIoULoss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='QualityFocalLoss',
            use_sigmoid=True),
        norm_cfg=dict(type='SyncBN'),
        num_classes=96,
        pred_kernel_size=1,
        share_conv=True,
        stacked_convs=2,
        type='RTMDetSepBNHead',
        with_objectness=False),
    data_preprocessor=dict(
        batch_augments=None,
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        expand_ratio=0.5,
        in_channels=[
            96,
            192,
            384,
        ],
        norm_cfg=dict(type='SyncBN'),
        num_csp_blocks=1,
        out_channels=96,
        type='CSPNeXtPAFPN'),
    test_cfg=dict(
        max_per_img=300,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.65, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(topk=13, type='DynamicSoftLabelAssigner'),
        debug=False,
        pos_weight=-1),
    type='RTMDet')
optim_wrapper = dict(
    optimizer=dict(lr=8e-05, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        bias_decay_mult=0, bypass_duplicate=True, norm_decay_mult=0),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=10, start_factor=1e-05, type='LinearLR'),
    dict(
        T_max=10,
        begin=10,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=4.000000000000001e-06,
        type='CosineAnnealingLR'),
]
resume = False
stage2_num_epochs = 1
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'marbles',
                'cups',
                'colored_wood_blocks',
                'nine_hole_peg_test',
                'toy_airplane',
                'lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        640,
        640,
    ), type='Resize'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_batch_size_per_gpu = 4
train_cfg = dict(
    dynamic_intervals=[
        (
            280,
            1,
        ),
    ],
    max_epochs=20,
    type='EpochBasedTrainLoop',
    val_interval=1)
train_dataloader = dict(
    batch_sampler=None,
    batch_size=4,
    dataset=dict(
        ann_file='train.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='data/ycb/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'marbles',
                'cups',
                'colored_wood_blocks',
                'nine_hole_peg_test',
                'toy_airplane',
                'lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=20,
                pad_val=114.0,
                random_pop=False,
                type='CachedMosaic'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    1280,
                    1280,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=10,
                pad_val=(
                    114,
                    114,
                    114,
                ),
                prob=0.5,
                random_pop=False,
                ratio_range=(
                    1.0,
                    1.0,
                ),
                type='CachedMixUp'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 2
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=20,
        pad_val=114.0,
        random_pop=False,
        type='CachedMosaic'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            1280,
            1280,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=10,
        pad_val=(
            114,
            114,
            114,
        ),
        prob=0.5,
        random_pop=False,
        ratio_range=(
            1.0,
            1.0,
        ),
        type='CachedMixUp'),
    dict(type='PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        scale=(
            640,
            640,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.6, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    640,
                    640,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    320,
                    320,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    960,
                    960,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(
                    pad_val=dict(img=(
                        114,
                        114,
                        114,
                    )),
                    size=(
                        960,
                        960,
                    ),
                    type='Pad'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='val.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/ycb/',
        metainfo=dict(
            classes=(
                'chips_can',
                'master_chef_can',
                'cracker_box',
                'sugar_box',
                'tomato_soup_can',
                'mustard_bottle',
                'tuna_fish_can',
                'pudding_box',
                'gelatin_box',
                'potted_meat_can',
                'banana',
                'strawberry',
                'apple',
                'lemon',
                'peach',
                'pear',
                'orange',
                'plum',
                'pitcher_base',
                'bleach_cleanser',
                'windex_bottle',
                'wine_glass',
                'bowl',
                'mug',
                'sponge',
                'plate',
                'fork',
                'spoon',
                'knife',
                'spatula',
                'power_drill',
                'wood_block',
                'scissors',
                'padlock',
                'key',
                'large_marker',
                'small_marker',
                'adjustable_wrench',
                'phillips_screwdriver',
                'flat_screwdriver',
                'plastic_nut',
                'hammer',
                'small_clamp',
                'medium_clamp',
                'large_clamp',
                'extra_large_clamp',
                'mini_soccer_ball',
                'softball',
                'baseball',
                'tennis_ball',
                'racquetball',
                'golf_ball',
                'chain',
                'foam_brick',
                'dice',
                'marbles',
                'cups',
                'colored_wood_blocks',
                'nine_hole_peg_test',
                'toy_airplane',
                'lego_duplo',
                'timer',
                'rubiks_cube',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/ycb/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs\\rtmdet_tiny_1xb4-20e_ycb'

2025/02/28 20:37:18 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/02/28 20:37:18 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2025/02/28 20:37:22 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2025/02/28 20:37:23 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([96, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([96]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([96, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([96]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([96, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([96]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2025/02/28 20:37:23 - mmengine - INFO - Load checkpoint from ./checkpoints/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2025/02/28 20:37:23 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/02/28 20:37:23 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/02/28 20:37:23 - mmengine - INFO - Checkpoints will be saved to C:\Users\kevin\Documents\OpenRobotics\detection\mmdetection\work_dirs\rtmdet_tiny_1xb4-20e_ycb.
2025/02/28 20:37:34 - mmengine - INFO - Epoch(train)  [1][   5/8123]  base_lr: 3.5556e-05 lr: 3.5556e-05  eta: 4 days, 0:13:03  time: 2.1322  data_time: 1.6117  memory: 1434  loss: 2.8247  loss_cls: 2.1256  loss_bbox: 0.6990
2025/02/28 20:37:37 - mmengine - INFO - Epoch(train)  [1][  10/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2 days, 14:18:21  time: 1.3807  data_time: 1.0195  memory: 1434  loss: 2.8185  loss_cls: 2.1143  loss_bbox: 0.7042
2025/02/28 20:37:40 - mmengine - INFO - Epoch(train)  [1][  15/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2 days, 2:38:13  time: 1.1222  data_time: 0.8004  memory: 1434  loss: 2.8746  loss_cls: 2.1999  loss_bbox: 0.6746
2025/02/28 20:37:45 - mmengine - INFO - Epoch(train)  [1][  20/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 2 days, 0:30:44  time: 1.0751  data_time: 0.7568  memory: 1434  loss: 2.8838  loss_cls: 2.2105  loss_bbox: 0.6733
2025/02/28 20:37:48 - mmengine - INFO - Epoch(train)  [1][  25/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 21:06:45  time: 0.9998  data_time: 0.6947  memory: 1434  loss: 2.9105  loss_cls: 2.2515  loss_bbox: 0.6590
2025/02/28 20:37:52 - mmengine - INFO - Epoch(train)  [1][  30/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 19:58:05  time: 0.9745  data_time: 0.6577  memory: 1434  loss: 2.9037  loss_cls: 2.2446  loss_bbox: 0.6592
2025/02/28 20:37:55 - mmengine - INFO - Epoch(train)  [1][  35/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 17:27:59  time: 0.9191  data_time: 0.6171  memory: 1434  loss: 2.9234  loss_cls: 2.2736  loss_bbox: 0.6498
2025/02/28 20:37:59 - mmengine - INFO - Epoch(train)  [1][  40/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 15:54:41  time: 0.8846  data_time: 0.5960  memory: 1434  loss: 2.9245  loss_cls: 2.2781  loss_bbox: 0.6464
2025/02/28 20:38:01 - mmengine - INFO - Epoch(train)  [1][  45/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 14:11:57  time: 0.8467  data_time: 0.5685  memory: 1434  loss: 2.9249  loss_cls: 2.2852  loss_bbox: 0.6397
2025/02/28 20:38:04 - mmengine - INFO - Epoch(train)  [1][  50/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 13:17:59  time: 0.8268  data_time: 0.5525  memory: 1434  loss: 2.9357  loss_cls: 2.3039  loss_bbox: 0.6319
2025/02/28 20:38:07 - mmengine - INFO - Epoch(train)  [1][  55/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 12:16:24  time: 0.6713  data_time: 0.4305  memory: 1434  loss: 2.9751  loss_cls: 2.3664  loss_bbox: 0.6087
2025/02/28 20:38:11 - mmengine - INFO - Epoch(train)  [1][  60/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 12:00:32  time: 0.6817  data_time: 0.4364  memory: 1434  loss: 2.9982  loss_cls: 2.4062  loss_bbox: 0.5920
2025/02/28 20:38:14 - mmengine - INFO - Epoch(train)  [1][  65/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:12:33  time: 0.6780  data_time: 0.4336  memory: 1434  loss: 3.0201  loss_cls: 2.4415  loss_bbox: 0.5786
2025/02/28 20:38:19 - mmengine - INFO - Epoch(train)  [1][  70/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:42:10  time: 0.6780  data_time: 0.4394  memory: 1434  loss: 3.0483  loss_cls: 2.4916  loss_bbox: 0.5566
2025/02/28 20:38:22 - mmengine - INFO - Epoch(train)  [1][  75/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:19:13  time: 0.6746  data_time: 0.4387  memory: 1434  loss: 3.0714  loss_cls: 2.5308  loss_bbox: 0.5406
2025/02/28 20:38:26 - mmengine - INFO - Epoch(train)  [1][  80/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:42:05  time: 0.6817  data_time: 0.4493  memory: 1434  loss: 3.0797  loss_cls: 2.5484  loss_bbox: 0.5313
2025/02/28 20:38:30 - mmengine - INFO - Epoch(train)  [1][  85/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:34:38  time: 0.6976  data_time: 0.4588  memory: 1434  loss: 3.0834  loss_cls: 2.5594  loss_bbox: 0.5240
2025/02/28 20:38:35 - mmengine - INFO - Epoch(train)  [1][  90/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:52:15  time: 0.7239  data_time: 0.4736  memory: 1434  loss: 3.0937  loss_cls: 2.5762  loss_bbox: 0.5175
2025/02/28 20:38:38 - mmengine - INFO - Epoch(train)  [1][  95/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:39:00  time: 0.7398  data_time: 0.4738  memory: 1434  loss: 3.0955  loss_cls: 2.5748  loss_bbox: 0.5208
2025/02/28 20:38:42 - mmengine - INFO - Epoch(train)  [1][ 100/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:28:38  time: 0.7465  data_time: 0.4747  memory: 1434  loss: 3.1033  loss_cls: 2.5935  loss_bbox: 0.5098
2025/02/28 20:38:45 - mmengine - INFO - Epoch(train)  [1][ 105/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:21:49  time: 0.7622  data_time: 0.4793  memory: 1434  loss: 3.0919  loss_cls: 2.5827  loss_bbox: 0.5092
2025/02/28 20:38:49 - mmengine - INFO - Epoch(train)  [1][ 110/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:09:29  time: 0.7573  data_time: 0.4753  memory: 1434  loss: 3.0976  loss_cls: 2.5954  loss_bbox: 0.5021
2025/02/28 20:38:53 - mmengine - INFO - Epoch(train)  [1][ 115/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 11:02:35  time: 0.7726  data_time: 0.4895  memory: 1434  loss: 3.0668  loss_cls: 2.5554  loss_bbox: 0.5114
2025/02/28 20:38:55 - mmengine - INFO - Epoch(train)  [1][ 120/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:34:09  time: 0.7317  data_time: 0.4458  memory: 1434  loss: 3.0560  loss_cls: 2.5445  loss_bbox: 0.5115
2025/02/28 20:39:00 - mmengine - INFO - Epoch(train)  [1][ 125/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:58:56  time: 0.7649  data_time: 0.4733  memory: 1434  loss: 3.0397  loss_cls: 2.5267  loss_bbox: 0.5131
2025/02/28 20:39:03 - mmengine - INFO - Epoch(train)  [1][ 130/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:38:36  time: 0.7311  data_time: 0.4473  memory: 1434  loss: 3.0382  loss_cls: 2.5289  loss_bbox: 0.5093
2025/02/28 20:39:06 - mmengine - INFO - Epoch(train)  [1][ 135/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:22:47  time: 0.7177  data_time: 0.4358  memory: 1434  loss: 2.9913  loss_cls: 2.4864  loss_bbox: 0.5049
2025/02/28 20:39:09 - mmengine - INFO - Epoch(train)  [1][ 140/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:02:11  time: 0.6821  data_time: 0.4127  memory: 1434  loss: 2.9679  loss_cls: 2.4761  loss_bbox: 0.4919
2025/02/28 20:39:11 - mmengine - INFO - Epoch(train)  [1][ 145/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:40:06  time: 0.6637  data_time: 0.4080  memory: 1434  loss: 2.9372  loss_cls: 2.4560  loss_bbox: 0.4812
2025/02/28 20:39:14 - mmengine - INFO - Epoch(train)  [1][ 150/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:23:40  time: 0.6488  data_time: 0.4046  memory: 1434  loss: 2.8959  loss_cls: 2.4198  loss_bbox: 0.4760
2025/02/28 20:39:17 - mmengine - INFO - Epoch(train)  [1][ 155/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:04:56  time: 0.6280  data_time: 0.3913  memory: 1434  loss: 2.8590  loss_cls: 2.3884  loss_bbox: 0.4706
2025/02/28 20:39:19 - mmengine - INFO - Epoch(train)  [1][ 160/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:41:33  time: 0.6054  data_time: 0.3738  memory: 1434  loss: 2.8218  loss_cls: 2.3413  loss_bbox: 0.4805
2025/02/28 20:39:21 - mmengine - INFO - Epoch(train)  [1][ 165/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:12:28  time: 0.5703  data_time: 0.3459  memory: 1434  loss: 2.7982  loss_cls: 2.3287  loss_bbox: 0.4695
2025/02/28 20:39:24 - mmengine - INFO - Epoch(train)  [1][ 170/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:55:47  time: 0.5683  data_time: 0.3521  memory: 1434  loss: 2.7621  loss_cls: 2.2877  loss_bbox: 0.4744
2025/02/28 20:39:26 - mmengine - INFO - Epoch(train)  [1][ 175/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:35:45  time: 0.5137  data_time: 0.3049  memory: 1434  loss: 2.7258  loss_cls: 2.2613  loss_bbox: 0.4646
2025/02/28 20:39:28 - mmengine - INFO - Epoch(train)  [1][ 180/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:19:47  time: 0.5045  data_time: 0.3029  memory: 1434  loss: 2.6798  loss_cls: 2.2210  loss_bbox: 0.4589
2025/02/28 20:39:30 - mmengine - INFO - Epoch(train)  [1][ 185/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:01:33  time: 0.4880  data_time: 0.2921  memory: 1434  loss: 2.6671  loss_cls: 2.1969  loss_bbox: 0.4701
2025/02/28 20:39:33 - mmengine - INFO - Epoch(train)  [1][ 190/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 6:46:12  time: 0.4804  data_time: 0.2848  memory: 1434  loss: 2.6173  loss_cls: 2.1346  loss_bbox: 0.4827
2025/02/28 20:39:35 - mmengine - INFO - Epoch(train)  [1][ 195/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 6:30:30  time: 0.4742  data_time: 0.2805  memory: 1434  loss: 2.6012  loss_cls: 2.1337  loss_bbox: 0.4674
2025/02/28 20:39:40 - mmengine - INFO - Epoch(train)  [1][ 200/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 6:53:07  time: 0.5189  data_time: 0.3082  memory: 1434  loss: 2.5718  loss_cls: 2.1098  loss_bbox: 0.4620
2025/02/28 20:39:45 - mmengine - INFO - Epoch(train)  [1][ 205/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:16:17  time: 0.5700  data_time: 0.2782  memory: 1434  loss: 2.5627  loss_cls: 2.1007  loss_bbox: 0.4620
2025/02/28 20:39:51 - mmengine - INFO - Epoch(train)  [1][ 210/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:38:46  time: 0.6286  data_time: 0.2517  memory: 1434  loss: 2.5492  loss_cls: 2.0981  loss_bbox: 0.4511
2025/02/28 20:39:56 - mmengine - INFO - Epoch(train)  [1][ 215/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:59:29  time: 0.6947  data_time: 0.2324  memory: 1434  loss: 2.5199  loss_cls: 2.0833  loss_bbox: 0.4366
2025/02/28 20:40:01 - mmengine - INFO - Epoch(train)  [1][ 220/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:18:14  time: 0.7458  data_time: 0.2024  memory: 1434  loss: 2.4844  loss_cls: 2.0600  loss_bbox: 0.4243
2025/02/28 20:40:06 - mmengine - INFO - Epoch(train)  [1][ 225/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:37:30  time: 0.8046  data_time: 0.1787  memory: 1434  loss: 2.4436  loss_cls: 2.0125  loss_bbox: 0.4310
2025/02/28 20:40:11 - mmengine - INFO - Epoch(train)  [1][ 230/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:56:37  time: 0.8607  data_time: 0.1496  memory: 1434  loss: 2.4280  loss_cls: 2.0029  loss_bbox: 0.4251
2025/02/28 20:40:16 - mmengine - INFO - Epoch(train)  [1][ 235/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:13:08  time: 0.9180  data_time: 0.1257  memory: 1434  loss: 2.4084  loss_cls: 1.9984  loss_bbox: 0.4100
2025/02/28 20:40:21 - mmengine - INFO - Epoch(train)  [1][ 240/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:28:59  time: 0.9727  data_time: 0.0970  memory: 1434  loss: 2.4434  loss_cls: 2.0504  loss_bbox: 0.3930
2025/02/28 20:40:27 - mmengine - INFO - Epoch(train)  [1][ 245/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:47:59  time: 1.0358  data_time: 0.0717  memory: 1434  loss: 2.4322  loss_cls: 2.0300  loss_bbox: 0.4023
2025/02/28 20:40:32 - mmengine - INFO - Epoch(train)  [1][ 250/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:05:44  time: 1.0425  data_time: 0.0064  memory: 1434  loss: 2.4255  loss_cls: 2.0190  loss_bbox: 0.4065
2025/02/28 20:40:38 - mmengine - INFO - Epoch(train)  [1][ 255/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:21:41  time: 1.0447  data_time: 0.0065  memory: 1434  loss: 2.3774  loss_cls: 1.9777  loss_bbox: 0.3996
2025/02/28 20:40:43 - mmengine - INFO - Epoch(train)  [1][ 260/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:34:52  time: 1.0420  data_time: 0.0066  memory: 1434  loss: 2.3321  loss_cls: 1.9418  loss_bbox: 0.3902
2025/02/28 20:40:47 - mmengine - INFO - Epoch(train)  [1][ 265/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:40:39  time: 1.0270  data_time: 0.0069  memory: 1434  loss: 2.3139  loss_cls: 1.9188  loss_bbox: 0.3950
2025/02/28 20:40:48 - mmengine - INFO - Epoch(train)  [1][ 270/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:12:15  time: 0.9458  data_time: 0.0095  memory: 1434  loss: 2.2940  loss_cls: 1.8970  loss_bbox: 0.3970
2025/02/28 20:40:51 - mmengine - INFO - Epoch(train)  [1][ 275/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 10:02:45  time: 0.8987  data_time: 0.0457  memory: 1434  loss: 2.2564  loss_cls: 1.8663  loss_bbox: 0.3901
2025/02/28 20:40:53 - mmengine - INFO - Epoch(train)  [1][ 280/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:48:26  time: 0.8397  data_time: 0.0697  memory: 1434  loss: 2.2234  loss_cls: 1.8420  loss_bbox: 0.3815
2025/02/28 20:40:56 - mmengine - INFO - Epoch(train)  [1][ 285/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:34:39  time: 0.7838  data_time: 0.0961  memory: 1434  loss: 2.2073  loss_cls: 1.8264  loss_bbox: 0.3809
2025/02/28 20:40:57 - mmengine - INFO - Epoch(train)  [1][ 290/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:15:36  time: 0.7157  data_time: 0.1103  memory: 1434  loss: 2.1479  loss_cls: 1.7619  loss_bbox: 0.3859
2025/02/28 20:41:01 - mmengine - INFO - Epoch(train)  [1][ 295/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:13:19  time: 0.6758  data_time: 0.1579  memory: 1434  loss: 2.1234  loss_cls: 1.7453  loss_bbox: 0.3781
2025/02/28 20:41:03 - mmengine - INFO - Epoch(train)  [1][ 300/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:00:47  time: 0.6139  data_time: 0.1795  memory: 1434  loss: 2.1211  loss_cls: 1.7391  loss_bbox: 0.3820
2025/02/28 20:41:06 - mmengine - INFO - Epoch(train)  [1][ 305/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:56:22  time: 0.5715  data_time: 0.2215  memory: 1434  loss: 2.1073  loss_cls: 1.7135  loss_bbox: 0.3938
2025/02/28 20:41:08 - mmengine - INFO - Epoch(train)  [1][ 310/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:42:40  time: 0.5116  data_time: 0.2436  memory: 1434  loss: 2.0974  loss_cls: 1.6989  loss_bbox: 0.3985
2025/02/28 20:41:11 - mmengine - INFO - Epoch(train)  [1][ 315/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:36:26  time: 0.4816  data_time: 0.2825  memory: 1434  loss: 2.0732  loss_cls: 1.6773  loss_bbox: 0.3960
2025/02/28 20:41:13 - mmengine - INFO - Epoch(train)  [1][ 320/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:22:20  time: 0.5004  data_time: 0.2985  memory: 1434  loss: 2.0486  loss_cls: 1.6588  loss_bbox: 0.3898
2025/02/28 20:41:16 - mmengine - INFO - Epoch(train)  [1][ 325/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:17:15  time: 0.5035  data_time: 0.3031  memory: 1434  loss: 2.0447  loss_cls: 1.6585  loss_bbox: 0.3862
2025/02/28 20:41:20 - mmengine - INFO - Epoch(train)  [1][ 330/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:16:04  time: 0.5263  data_time: 0.3184  memory: 1434  loss: 2.0543  loss_cls: 1.6650  loss_bbox: 0.3893
2025/02/28 20:41:24 - mmengine - INFO - Epoch(train)  [1][ 335/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:22:29  time: 0.5680  data_time: 0.3608  memory: 1434  loss: 2.0549  loss_cls: 1.6759  loss_bbox: 0.3790
2025/02/28 20:41:27 - mmengine - INFO - Epoch(train)  [1][ 340/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:14:34  time: 0.5863  data_time: 0.3741  memory: 1434  loss: 2.0356  loss_cls: 1.6645  loss_bbox: 0.3711
2025/02/28 20:41:31 - mmengine - INFO - Epoch(train)  [1][ 345/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:22:53  time: 0.6103  data_time: 0.3840  memory: 1434  loss: 2.0151  loss_cls: 1.6479  loss_bbox: 0.3672
2025/02/28 20:41:35 - mmengine - INFO - Epoch(train)  [1][ 350/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:22:32  time: 0.6354  data_time: 0.3887  memory: 1434  loss: 2.0059  loss_cls: 1.6396  loss_bbox: 0.3663
2025/02/28 20:41:40 - mmengine - INFO - Epoch(train)  [1][ 355/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:35:49  time: 0.6789  data_time: 0.4175  memory: 1434  loss: 2.0135  loss_cls: 1.6517  loss_bbox: 0.3617
2025/02/28 20:41:45 - mmengine - INFO - Epoch(train)  [1][ 360/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:44:07  time: 0.7317  data_time: 0.4586  memory: 1434  loss: 2.0196  loss_cls: 1.6505  loss_bbox: 0.3691
2025/02/28 20:41:50 - mmengine - INFO - Epoch(train)  [1][ 365/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:52:31  time: 0.7690  data_time: 0.4849  memory: 1434  loss: 2.0116  loss_cls: 1.6413  loss_bbox: 0.3703
2025/02/28 20:41:53 - mmengine - INFO - Epoch(train)  [1][ 370/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:48:51  time: 0.7930  data_time: 0.4905  memory: 1434  loss: 2.0040  loss_cls: 1.6330  loss_bbox: 0.3709
2025/02/28 20:41:57 - mmengine - INFO - Epoch(train)  [1][ 375/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:55:23  time: 0.8244  data_time: 0.4986  memory: 1434  loss: 1.9863  loss_cls: 1.6187  loss_bbox: 0.3676
2025/02/28 20:42:01 - mmengine - INFO - Epoch(train)  [1][ 380/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:58:44  time: 0.8382  data_time: 0.5039  memory: 1434  loss: 1.9557  loss_cls: 1.5848  loss_bbox: 0.3709
2025/02/28 20:42:06 - mmengine - INFO - Epoch(train)  [1][ 385/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:07:55  time: 0.8501  data_time: 0.4949  memory: 1434  loss: 1.9452  loss_cls: 1.5638  loss_bbox: 0.3814
2025/02/28 20:42:11 - mmengine - INFO - Epoch(train)  [1][ 390/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:11:46  time: 0.8829  data_time: 0.5166  memory: 1434  loss: 1.9587  loss_cls: 1.5734  loss_bbox: 0.3853
2025/02/28 20:42:14 - mmengine - INFO - Epoch(train)  [1][ 395/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:11:54  time: 0.8642  data_time: 0.5039  memory: 1434  loss: 1.9457  loss_cls: 1.5659  loss_bbox: 0.3798
2025/02/28 20:42:19 - mmengine - INFO - Epoch(train)  [1][ 400/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:15:28  time: 0.8776  data_time: 0.5319  memory: 1434  loss: 1.9156  loss_cls: 1.5416  loss_bbox: 0.3740
2025/02/28 20:42:23 - mmengine - INFO - Epoch(train)  [1][ 405/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:21:08  time: 0.8616  data_time: 0.5171  memory: 1434  loss: 1.8879  loss_cls: 1.5187  loss_bbox: 0.3692
2025/02/28 20:42:26 - mmengine - INFO - Epoch(train)  [1][ 410/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:11:57  time: 0.8133  data_time: 0.4767  memory: 1434  loss: 1.8557  loss_cls: 1.4959  loss_bbox: 0.3598
2025/02/28 20:42:29 - mmengine - INFO - Epoch(train)  [1][ 415/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:13:39  time: 0.7970  data_time: 0.4612  memory: 1434  loss: 1.8424  loss_cls: 1.4865  loss_bbox: 0.3559
2025/02/28 20:42:32 - mmengine - INFO - Epoch(train)  [1][ 420/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:06:52  time: 0.7868  data_time: 0.4704  memory: 1434  loss: 1.8348  loss_cls: 1.4782  loss_bbox: 0.3566
2025/02/28 20:42:36 - mmengine - INFO - Epoch(train)  [1][ 425/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:09:13  time: 0.7767  data_time: 0.4787  memory: 1434  loss: 1.8302  loss_cls: 1.4629  loss_bbox: 0.3674
2025/02/28 20:42:39 - mmengine - INFO - Epoch(train)  [1][ 430/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 9:03:43  time: 0.7503  data_time: 0.4653  memory: 1434  loss: 1.8314  loss_cls: 1.4669  loss_bbox: 0.3644
2025/02/28 20:42:42 - mmengine - INFO - Epoch(train)  [1][ 435/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:59:24  time: 0.7105  data_time: 0.4399  memory: 1434  loss: 1.8249  loss_cls: 1.4616  loss_bbox: 0.3633
2025/02/28 20:42:44 - mmengine - INFO - Epoch(train)  [1][ 440/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:51:53  time: 0.6746  data_time: 0.4207  memory: 1434  loss: 1.8254  loss_cls: 1.4564  loss_bbox: 0.3690
2025/02/28 20:42:48 - mmengine - INFO - Epoch(train)  [1][ 445/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:49:22  time: 0.6652  data_time: 0.4118  memory: 1434  loss: 1.8173  loss_cls: 1.4394  loss_bbox: 0.3778
2025/02/28 20:42:51 - mmengine - INFO - Epoch(train)  [1][ 450/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:47:16  time: 0.6468  data_time: 0.4018  memory: 1434  loss: 1.8029  loss_cls: 1.4282  loss_bbox: 0.3747
2025/02/28 20:42:54 - mmengine - INFO - Epoch(train)  [1][ 455/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:44:26  time: 0.6193  data_time: 0.3806  memory: 1434  loss: 1.7778  loss_cls: 1.4077  loss_bbox: 0.3701
2025/02/28 20:42:58 - mmengine - INFO - Epoch(train)  [1][ 460/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:43:32  time: 0.6428  data_time: 0.4077  memory: 1434  loss: 1.7724  loss_cls: 1.3994  loss_bbox: 0.3730
2025/02/28 20:43:00 - mmengine - INFO - Epoch(train)  [1][ 465/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:38:26  time: 0.6190  data_time: 0.3890  memory: 1434  loss: 1.7562  loss_cls: 1.3822  loss_bbox: 0.3741
2025/02/28 20:43:04 - mmengine - INFO - Epoch(train)  [1][ 470/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:37:17  time: 0.6348  data_time: 0.3992  memory: 1434  loss: 1.7420  loss_cls: 1.3694  loss_bbox: 0.3726
2025/02/28 20:43:07 - mmengine - INFO - Epoch(train)  [1][ 475/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:35:37  time: 0.6205  data_time: 0.3776  memory: 1434  loss: 1.7499  loss_cls: 1.3814  loss_bbox: 0.3685
2025/02/28 20:43:10 - mmengine - INFO - Epoch(train)  [1][ 480/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:31:55  time: 0.6237  data_time: 0.3753  memory: 1434  loss: 1.7322  loss_cls: 1.3723  loss_bbox: 0.3599
2025/02/28 20:43:13 - mmengine - INFO - Epoch(train)  [1][ 485/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:27:54  time: 0.6220  data_time: 0.3744  memory: 1434  loss: 1.7012  loss_cls: 1.3544  loss_bbox: 0.3468
2025/02/28 20:43:16 - mmengine - INFO - Epoch(train)  [1][ 490/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:24:59  time: 0.6348  data_time: 0.3827  memory: 1434  loss: 1.6520  loss_cls: 1.3179  loss_bbox: 0.3341
2025/02/28 20:43:20 - mmengine - INFO - Epoch(train)  [1][ 495/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:24:20  time: 0.6398  data_time: 0.3919  memory: 1434  loss: 1.6348  loss_cls: 1.3010  loss_bbox: 0.3338
2025/02/28 20:43:23 - mmengine - INFO - Epoch(train)  [1][ 500/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:20:41  time: 0.6323  data_time: 0.3814  memory: 1434  loss: 1.6119  loss_cls: 1.2801  loss_bbox: 0.3318
2025/02/28 20:43:26 - mmengine - INFO - Epoch(train)  [1][ 505/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:20:10  time: 0.6390  data_time: 0.3848  memory: 1434  loss: 1.6109  loss_cls: 1.2789  loss_bbox: 0.3320
2025/02/28 20:43:30 - mmengine - INFO - Epoch(train)  [1][ 510/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:19:32  time: 0.6389  data_time: 0.3835  memory: 1434  loss: 1.6039  loss_cls: 1.2807  loss_bbox: 0.3232
2025/02/28 20:43:33 - mmengine - INFO - Epoch(train)  [1][ 515/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:19:42  time: 0.6562  data_time: 0.3975  memory: 1434  loss: 1.5987  loss_cls: 1.2752  loss_bbox: 0.3235
2025/02/28 20:43:36 - mmengine - INFO - Epoch(train)  [1][ 520/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:15:27  time: 0.6432  data_time: 0.3838  memory: 1434  loss: 1.5938  loss_cls: 1.2737  loss_bbox: 0.3201
2025/02/28 20:43:40 - mmengine - INFO - Epoch(train)  [1][ 525/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:17:53  time: 0.6577  data_time: 0.3972  memory: 1434  loss: 1.5853  loss_cls: 1.2637  loss_bbox: 0.3216
2025/02/28 20:43:43 - mmengine - INFO - Epoch(train)  [1][ 530/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:12:41  time: 0.6498  data_time: 0.3961  memory: 1434  loss: 1.5796  loss_cls: 1.2485  loss_bbox: 0.3311
2025/02/28 20:43:47 - mmengine - INFO - Epoch(train)  [1][ 535/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:14:01  time: 0.6689  data_time: 0.4153  memory: 1434  loss: 1.5792  loss_cls: 1.2409  loss_bbox: 0.3384
2025/02/28 20:43:49 - mmengine - INFO - Epoch(train)  [1][ 540/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:09:43  time: 0.6618  data_time: 0.4079  memory: 1434  loss: 1.6037  loss_cls: 1.2598  loss_bbox: 0.3439
2025/02/28 20:43:53 - mmengine - INFO - Epoch(train)  [1][ 545/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:08:05  time: 0.6571  data_time: 0.4087  memory: 1434  loss: 1.6011  loss_cls: 1.2646  loss_bbox: 0.3365
2025/02/28 20:43:55 - mmengine - INFO - Epoch(train)  [1][ 550/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:04:08  time: 0.6540  data_time: 0.4088  memory: 1434  loss: 1.6062  loss_cls: 1.2669  loss_bbox: 0.3393
2025/02/28 20:43:58 - mmengine - INFO - Epoch(train)  [1][ 555/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:00:45  time: 0.6414  data_time: 0.4071  memory: 1434  loss: 1.6062  loss_cls: 1.2674  loss_bbox: 0.3388
2025/02/28 20:44:01 - mmengine - INFO - Epoch(train)  [1][ 560/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:58:14  time: 0.6326  data_time: 0.4005  memory: 1434  loss: 1.6068  loss_cls: 1.2660  loss_bbox: 0.3409
2025/02/28 20:44:04 - mmengine - INFO - Epoch(train)  [1][ 565/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:55:53  time: 0.6214  data_time: 0.3895  memory: 1434  loss: 1.6232  loss_cls: 1.2737  loss_bbox: 0.3495
2025/02/28 20:44:09 - mmengine - INFO - Epoch(train)  [1][ 570/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 8:01:55  time: 0.6625  data_time: 0.4305  memory: 1434  loss: 1.6143  loss_cls: 1.2625  loss_bbox: 0.3518
2025/02/28 20:44:12 - mmengine - INFO - Epoch(train)  [1][ 575/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:57:08  time: 0.6321  data_time: 0.4132  memory: 1434  loss: 1.5917  loss_cls: 1.2486  loss_bbox: 0.3431
2025/02/28 20:44:15 - mmengine - INFO - Epoch(train)  [1][ 580/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:55:18  time: 0.6439  data_time: 0.4305  memory: 1434  loss: 1.5891  loss_cls: 1.2476  loss_bbox: 0.3415
2025/02/28 20:44:19 - mmengine - INFO - Epoch(train)  [1][ 585/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:59:21  time: 0.6556  data_time: 0.4394  memory: 1434  loss: 1.5691  loss_cls: 1.2337  loss_bbox: 0.3355
2025/02/28 20:44:22 - mmengine - INFO - Epoch(train)  [1][ 590/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:54:25  time: 0.6508  data_time: 0.4391  memory: 1434  loss: 1.5446  loss_cls: 1.2110  loss_bbox: 0.3336
2025/02/28 20:44:25 - mmengine - INFO - Epoch(train)  [1][ 595/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:53:06  time: 0.6510  data_time: 0.4293  memory: 1434  loss: 1.5476  loss_cls: 1.2101  loss_bbox: 0.3375
2025/02/28 20:44:28 - mmengine - INFO - Epoch(train)  [1][ 600/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:49:35  time: 0.6509  data_time: 0.4251  memory: 1434  loss: 1.5588  loss_cls: 1.2191  loss_bbox: 0.3397
2025/02/28 20:44:31 - mmengine - INFO - Epoch(train)  [1][ 605/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:49:46  time: 0.6652  data_time: 0.4362  memory: 1434  loss: 1.5732  loss_cls: 1.2263  loss_bbox: 0.3469
2025/02/28 20:44:34 - mmengine - INFO - Epoch(train)  [1][ 610/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:47:13  time: 0.6638  data_time: 0.4255  memory: 1434  loss: 1.5619  loss_cls: 1.2143  loss_bbox: 0.3476
2025/02/28 20:44:38 - mmengine - INFO - Epoch(train)  [1][ 615/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:47:12  time: 0.6732  data_time: 0.4324  memory: 1434  loss: 1.5388  loss_cls: 1.2007  loss_bbox: 0.3381
2025/02/28 20:44:41 - mmengine - INFO - Epoch(train)  [1][ 620/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:46:53  time: 0.6459  data_time: 0.4062  memory: 1434  loss: 1.5285  loss_cls: 1.1901  loss_bbox: 0.3383
2025/02/28 20:44:45 - mmengine - INFO - Epoch(train)  [1][ 625/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:45:54  time: 0.6613  data_time: 0.4142  memory: 1434  loss: 1.5480  loss_cls: 1.2032  loss_bbox: 0.3448
2025/02/28 20:44:47 - mmengine - INFO - Epoch(train)  [1][ 630/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:40:21  time: 0.6428  data_time: 0.3839  memory: 1434  loss: 1.5524  loss_cls: 1.2092  loss_bbox: 0.3433
2025/02/28 20:44:50 - mmengine - INFO - Epoch(train)  [1][ 635/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:38:14  time: 0.6148  data_time: 0.3570  memory: 1434  loss: 1.5626  loss_cls: 1.2147  loss_bbox: 0.3479
2025/02/28 20:44:53 - mmengine - INFO - Epoch(train)  [1][ 640/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:34:14  time: 0.6167  data_time: 0.3478  memory: 1434  loss: 1.5646  loss_cls: 1.2181  loss_bbox: 0.3464
2025/02/28 20:44:55 - mmengine - INFO - Epoch(train)  [1][ 645/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:30:30  time: 0.6039  data_time: 0.3445  memory: 1434  loss: 1.5575  loss_cls: 1.2116  loss_bbox: 0.3459
2025/02/28 20:44:59 - mmengine - INFO - Epoch(train)  [1][ 650/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:30:36  time: 0.6192  data_time: 0.3673  memory: 1434  loss: 1.5413  loss_cls: 1.1982  loss_bbox: 0.3431
2025/02/28 20:45:02 - mmengine - INFO - Epoch(train)  [1][ 655/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:29:01  time: 0.6100  data_time: 0.3591  memory: 1434  loss: 1.5073  loss_cls: 1.1741  loss_bbox: 0.3332
2025/02/28 20:45:05 - mmengine - INFO - Epoch(train)  [1][ 660/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:26:48  time: 0.6099  data_time: 0.3587  memory: 1434  loss: 1.5072  loss_cls: 1.1727  loss_bbox: 0.3345
2025/02/28 20:45:09 - mmengine - INFO - Epoch(train)  [1][ 665/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:29:55  time: 0.6246  data_time: 0.3785  memory: 1434  loss: 1.5116  loss_cls: 1.1728  loss_bbox: 0.3387
2025/02/28 20:45:12 - mmengine - INFO - Epoch(train)  [1][ 670/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:27:05  time: 0.6115  data_time: 0.3667  memory: 1434  loss: 1.5316  loss_cls: 1.1921  loss_bbox: 0.3395
2025/02/28 20:45:16 - mmengine - INFO - Epoch(train)  [1][ 675/8123]  base_lr: 8.0000e-05 lr: 8.0000e-05  eta: 1 day, 7:27:43  time: 0.6185  data_time: 0.3741  memory: 1434  loss: 1.5245  loss_cls: 1.1807  loss_bbox: 0.3438
